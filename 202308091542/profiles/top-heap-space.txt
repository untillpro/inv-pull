File: airs-bp
Type: alloc_space
Time: Aug 9, 2023 at 3:45pm (UTC)
Showing nodes accounting for 528.48MB, 83.17% of 635.39MB total
Dropped 355 nodes (cum <= 3.18MB)
      flat  flat%   sum%        cum   cum%
   98.27MB 15.47% 15.47%   111.77MB 17.59%  encoding/json.(*decodeState).objectInterface
   79.52MB 12.52% 27.98%   107.02MB 16.84%  github.com/untillpro/dynobuffers.glob..func1
   48.16MB  7.58% 35.56%    48.16MB  7.58%  io.ReadAll
   30.56MB  4.81% 40.37%    30.56MB  4.81%  github.com/untillpro/dynobuffers.(*Buffer).prepareModifiedFields (inline)
      28MB  4.41% 44.78%       28MB  4.41%  github.com/google/flatbuffers/go.(*Builder).growByteBuffer (inline)
   27.50MB  4.33% 49.11%    27.50MB  4.33%  github.com/google/flatbuffers/go.NewBuilder (inline)
      13MB  2.05% 51.15%       13MB  2.05%  github.com/gocql/gocql.newFramer (inline)
      12MB  1.89% 53.04%       12MB  1.89%  encoding/json.unquote (inline)
    9.50MB  1.50% 54.54%     9.50MB  1.50%  github.com/alecthomas/participle/v2.(*parseContext).Branch (inline)
    8.50MB  1.34% 55.87%    55.01MB  8.66%  github.com/voedger/voedger/pkg/istructsmem.newKey
    8.50MB  1.34% 57.21%        9MB  1.42%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals.func1
       8MB  1.26% 58.47%        8MB  1.26%  encoding/base64.(*Encoding).DecodeString
       8MB  1.26% 59.73%        8MB  1.26%  github.com/alecthomas/participle/v2.(*parseContext).Defer (inline)
       8MB  1.26% 60.99%    42.01MB  6.61%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).build
    7.91MB  1.24% 62.23%     8.41MB  1.32%  github.com/alecthomas/participle/v2/lexer.Upgrade
    7.51MB  1.18% 63.42%     7.51MB  1.18%  github.com/gocql/gocql.(*framer).writeBytes (inline)
    7.51MB  1.18% 64.60%     7.51MB  1.18%  bytes.growSlice
    7.50MB  1.18% 65.78%    34.01MB  5.35%  github.com/voedger/voedger/pkg/istructsmem.newValue
    7.50MB  1.18% 66.96%    29.01MB  4.57%  github.com/gocql/gocql.(*Conn).executeBatch
    7.50MB  1.18% 68.14%    34.03MB  5.36%  github.com/gocql/gocql.(*Conn).exec
       7MB  1.10% 69.24%        7MB  1.10%  reflect.mapassign_faststr
       7MB  1.10% 70.34%        7MB  1.10%  github.com/VictoriaMetrics/fastcache.(*bucket).Get
    6.01MB  0.95% 71.29%     6.01MB  0.95%  github.com/gocql/gocql.appendLong (inline)
       6MB  0.94% 72.23%        6MB  0.94%  github.com/google/flatbuffers/go.(*Builder).StartObject (inline)
       6MB  0.94% 73.18%        6MB  0.94%  time.NewTimer
       6MB  0.94% 74.12%        6MB  0.94%  github.com/voedger/voedger/pkg/pipeline.forkOperator.DoSync
       5MB  0.79% 74.91%        5MB  0.79%  github.com/gocql/gocql.(*queryMetrics).hostMetricsLocked
       4MB  0.63% 75.54%        4MB  0.63%  github.com/alecthomas/participle/v2.newTagLexer
       4MB  0.63% 76.17%    22.52MB  3.54%  github.com/gocql/gocql.(*Conn).executeQuery
       4MB  0.63% 76.80%    29.51MB  4.64%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Get
       4MB  0.63% 77.43%    11.51MB  1.81%  bytes.(*Buffer).grow
    3.50MB  0.55% 77.98%     3.50MB  0.55%  reflect.New
       3MB  0.47% 78.45%   118.77MB 18.69%  encoding/json.Unmarshal
       3MB  0.47% 78.92%     9.50MB  1.50%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).ElementBuilder
    2.50MB  0.39% 79.32%    28.03MB  4.41%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).Update
    2.50MB  0.39% 79.71%        5MB  0.79%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).readPlogToTheEnd2
       2MB  0.31% 80.03%    26.01MB  4.09%  github.com/alecthomas/participle/v2.(*sequence).Parse
    1.50MB  0.24% 80.26%     9.03MB  1.42%  github.com/gocql/gocql.(*Conn).recv
    1.50MB  0.24% 80.50%        5MB  0.79%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).storeToBytes
    1.50MB  0.24% 80.73%    38.01MB  5.98%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).PutBatch
    1.50MB  0.24% 80.97%     3.50MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeViewClustKey
    1.50MB  0.24% 81.21%   123.27MB 19.40%  encoding/json.(*decodeState).object
       1MB  0.16% 81.36%        5MB  0.79%  net/http.readRequest
       1MB  0.16% 81.52%        4MB  0.63%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*articleService).isPromoArticle
       1MB  0.16% 81.68%    36.50MB  5.75%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ApplyBatch
       1MB  0.16% 81.84%    26.01MB  4.09%  github.com/alecthomas/participle/v2.(*strct).Parse
       1MB  0.16% 81.99%     6.50MB  1.02%  github.com/voedger/voedger/pkg/istructsmem.storeRow
    0.50MB 0.079% 82.07%     5.50MB  0.87%  net/http.(*conn).readRequest
    0.50MB 0.079% 82.15%        5MB  0.79%  github.com/voedger/voedger/pkg/sys/authnz/workspace.qcwbnQryExec
    0.50MB 0.079% 82.23%    16.01MB  2.52%  github.com/golang-jwt/jwt.(*Parser).ParseUnverified
    0.50MB 0.079% 82.31%    38.01MB  5.98%  github.com/voedger/voedger/pkg/iauthnzimpl.(*implIAuthenticator).Authenticate
    0.50MB 0.079% 82.39%    34.01MB  5.35%  github.com/untillpro/airs-bp3/packages/air/dashboard.glob..func1
    0.50MB 0.079% 82.47%     5.50MB  0.87%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.ProvideTableBusinessValidator.func1.1
    0.50MB 0.079% 82.54%        4MB  0.63%  github.com/voedger/voedger/pkg/processors/query.implRowsProcessorFactory
    0.50MB 0.079% 82.62%    49.01MB  7.71%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).NewKeyBuilder
    0.50MB 0.079% 82.70%    18.50MB  2.91%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ProvideValueBuilder
    0.50MB 0.079% 82.78%     3.50MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).regenerateIDs
    0.50MB 0.079% 82.86%    11.50MB  1.81%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).validate
    0.50MB 0.079% 82.94%     3.50MB  0.55%  github.com/untillpro/ibusmem.(*bus).SendRequest2
    0.50MB 0.079% 83.02%    26.01MB  4.09%  github.com/alecthomas/participle/v2.(*capture).Parse
    0.50MB 0.079% 83.10%    49.16MB  7.74%  github.com/voedger/voedger/pkg/router.createRequest
    0.50MB 0.079% 83.17%       13MB  2.05%  github.com/voedger/voedger/pkg/state.(*recordsStorage).Get
         0     0% 83.17%    10.51MB  1.65%  bytes.(*Buffer).Write
         0     0% 83.17%    10.50MB  1.65%  encoding/json.(*Decoder).Decode
         0     0% 83.17%    13.03MB  2.05%  encoding/json.(*decodeState).array
         0     0% 83.17%   103.26MB 16.25%  encoding/json.(*decodeState).arrayInterface
         0     0% 83.17%   123.77MB 19.48%  encoding/json.(*decodeState).unmarshal
         0     0% 83.17%   123.77MB 19.48%  encoding/json.(*decodeState).value
         0     0% 83.17%   103.76MB 16.33%  encoding/json.(*decodeState).valueInterface
         0     0% 83.17%        7MB  1.10%  github.com/VictoriaMetrics/fastcache.(*Cache).HasGet
         0     0% 83.17%    23.01MB  3.62%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseFromLexer
         0     0% 83.17%    28.46MB  4.48%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseString
         0     0% 83.17%    28.42MB  4.47%  github.com/alecthomas/participle/v2.(*Parser[...]).parse
         0     0% 83.17%    23.01MB  3.62%  github.com/alecthomas/participle/v2.(*Parser[...]).parseInto
         0     0% 83.17%    23.01MB  3.62%  github.com/alecthomas/participle/v2.(*Parser[...]).parseOne
         0     0% 83.17%    25.51MB  4.02%  github.com/alecthomas/participle/v2.(*disjunction).Parse
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseCapture
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseDisjunction
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseSequence
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseTerm
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseTermNoModifiers
         0     0% 83.17%     7.01MB  1.10%  github.com/alecthomas/participle/v2.(*generatorContext).parseType
         0     0% 83.17%    26.01MB  4.09%  github.com/alecthomas/participle/v2.(*group).Parse
         0     0% 83.17%        4MB  0.63%  github.com/alecthomas/participle/v2.(*structLexer).Peek
         0     0% 83.17%     3.50MB  0.55%  github.com/alecthomas/participle/v2.Build[...]
         0     0% 83.17%    29.01MB  4.57%  github.com/gocql/gocql.(*Batch).execute
         0     0% 83.17%     9.03MB  1.42%  github.com/gocql/gocql.(*Conn).serve
         0     0% 83.17%    24.52MB  3.86%  github.com/gocql/gocql.(*Query).Exec
         0     0% 83.17%    25.52MB  4.02%  github.com/gocql/gocql.(*Query).Iter
         0     0% 83.17%    22.52MB  3.54%  github.com/gocql/gocql.(*Query).execute
         0     0% 83.17%    33.01MB  5.20%  github.com/gocql/gocql.(*Session).ExecuteBatch
         0     0% 83.17%    33.01MB  5.20%  github.com/gocql/gocql.(*Session).executeBatch
         0     0% 83.17%    25.52MB  4.02%  github.com/gocql/gocql.(*Session).executeQuery
         0     0% 83.17%        4MB  0.63%  github.com/gocql/gocql.(*framer).parseFrame
         0     0% 83.17%     3.51MB  0.55%  github.com/gocql/gocql.(*framer).writeBatchFrame
         0     0% 83.17%    10.02MB  1.58%  github.com/gocql/gocql.(*framer).writeExecuteFrame
         0     0% 83.17%     6.01MB  0.95%  github.com/gocql/gocql.(*framer).writeLong (inline)
         0     0% 83.17%    10.02MB  1.58%  github.com/gocql/gocql.(*framer).writeQueryParams
         0     0% 83.17%    56.53MB  8.90%  github.com/gocql/gocql.(*queryExecutor).attemptQuery
         0     0% 83.17%    56.53MB  8.90%  github.com/gocql/gocql.(*queryExecutor).do
         0     0% 83.17%    58.53MB  9.21%  github.com/gocql/gocql.(*queryExecutor).executeQuery
         0     0% 83.17%        5MB  0.79%  github.com/gocql/gocql.(*queryMetrics).attempt
         0     0% 83.17%     3.51MB  0.55%  github.com/gocql/gocql.(*writeBatchFrame).buildFrame
         0     0% 83.17%    10.02MB  1.58%  github.com/gocql/gocql.(*writeExecuteFrame).buildFrame
         0     0% 83.17%    18.01MB  2.83%  github.com/golang-jwt/jwt.(*Parser).Parse (inline)
         0     0% 83.17%    18.01MB  2.83%  github.com/golang-jwt/jwt.(*Parser).ParseWithClaims
         0     0% 83.17%     4.50MB  0.71%  github.com/golang-jwt/jwt.DecodeSegment (inline)
         0     0% 83.17%    18.01MB  2.83%  github.com/golang-jwt/jwt.Parse
         0     0% 83.17%       11MB  1.73%  github.com/google/flatbuffers/go.(*Builder).EndObject (inline)
         0     0% 83.17%     5.50MB  0.87%  github.com/google/flatbuffers/go.(*Builder).Finish (inline)
         0     0% 83.17%       28MB  4.41%  github.com/google/flatbuffers/go.(*Builder).Prep
         0     0% 83.17%     7.50MB  1.18%  github.com/google/flatbuffers/go.(*Builder).PrependInt64
         0     0% 83.17%    10.50MB  1.65%  github.com/google/flatbuffers/go.(*Builder).PrependVOffsetT
         0     0% 83.17%       11MB  1.73%  github.com/google/flatbuffers/go.(*Builder).WriteVtable
         0     0% 83.17%     5.50MB  0.87%  github.com/google/flatbuffers/go.(*Builder).finish
         0     0% 83.17%    60.32MB  9.49%  github.com/gorilla/mux.(*Router).ServeHTTP
         0     0% 83.17%    24.63MB  3.88%  github.com/untillpro/airs-bp3/airsbp3.buildVVM
         0     0% 83.17%    25.46MB  4.01%  github.com/untillpro/airs-bp3/apps/untill/airsbp.ProvideAirsBP.func1
         0     0% 83.17%    33.51MB  5.27%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do
         0     0% 83.17%        4MB  0.63%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do.func3
         0     0% 83.17%        8MB  1.26%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyOrders
         0     0% 83.17%     5.50MB  0.87%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyPayments
         0     0% 83.17%        5MB  0.79%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyWaiters
         0     0% 83.17%        5MB  0.79%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateHourlySales
         0     0% 83.17%    17.02MB  2.68%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdOrders
         0     0% 83.17%    19.02MB  2.99%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdPbill
         0     0% 83.17%     4.50MB  0.71%  github.com/untillpro/airs-bp3/packages/air/pbilldates.glob..func1
         0     0% 83.17%     5.50MB  0.87%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.ProvideTableBusinessValidator.func1
         0     0% 83.17%       12MB  1.89%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3
         0     0% 83.17%       12MB  1.89%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.1
         0     0% 83.17%     8.50MB  1.34%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.2
         0     0% 83.17%    31.01MB  4.88%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4
         0     0% 83.17%    31.01MB  4.88%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.1
         0     0% 83.17%    16.50MB  2.60%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.2
         0     0% 83.17%    24.96MB  3.93%  github.com/untillpro/airs-bp3/packages/untill.Provide
         0     0% 83.17%    11.52MB  1.81%  github.com/untillpro/dynobuffers.(*Buffer).IterateFields
         0     0% 83.17%    30.56MB  4.81%  github.com/untillpro/dynobuffers.(*Buffer).Set (inline)
         0     0% 83.17%       34MB  5.35%  github.com/untillpro/dynobuffers.(*Buffer).ToBytes
         0     0% 83.17%       34MB  5.35%  github.com/untillpro/dynobuffers.(*Buffer).ToBytesNilled
         0     0% 83.17%       34MB  5.35%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer
         0     0% 83.17%        6MB  0.94%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer.func1
         0     0% 83.17%    30.56MB  4.81%  github.com/untillpro/dynobuffers.(*Buffer).set
         0     0% 83.17%   107.02MB 16.84%  github.com/untillpro/dynobuffers.NewBuffer
         0     0% 83.17%    13.50MB  2.12%  github.com/untillpro/dynobuffers.encodeFixedSizeValue
         0     0% 83.17%   107.02MB 16.84%  github.com/untillpro/dynobuffers.getBuffer (inline)
         0     0% 83.17%    10.50MB  1.65%  github.com/voedger/voedger/pkg/appdef.(*fields).Fields
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/in10nmem.(*N10nBroker).WatchChannel
         0     0% 83.17%     7.50MB  1.18%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Get
         0     0% 83.17%    25.02MB  3.94%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Put
         0     0% 83.17%    39.01MB  6.14%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).PutBatch
         0     0% 83.17%     6.10MB  0.96%  github.com/voedger/voedger/pkg/istoragecache.(*implCachingAppStorageProvider).AppStorage
         0     0% 83.17%    24.52MB  3.86%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).Put
         0     0% 83.17%     3.57MB  0.56%  github.com/voedger/voedger/pkg/istructsmem.(*AppConfigType).prepare
         0     0% 83.17%     3.50MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).GetNewRawEventBuilder
         0     0% 83.17%    22.01MB  3.46%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutPlog
         0     0% 83.17%    15.51MB  2.44%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutWlog
         0     0% 83.17%        4MB  0.63%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).ReadPLog
         0     0% 83.17%    16.50MB  2.60%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply
         0     0% 83.17%    16.50MB  2.60%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply2
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).GetSingleton
         0     0% 83.17%        8MB  1.26%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).getRecord
         0     0% 83.17%       14MB  2.20%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).putRecordsBatch
         0     0% 83.17%     8.67MB  1.36%  github.com/voedger/voedger/pkg/istructsmem.(*appStructsProviderType).AppStructs
         0     0% 83.17%       17MB  2.68%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).Get
         0     0% 83.17%    55.01MB  8.66%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).KeyBuilder
         0     0% 83.17%       18MB  2.83%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).NewValueBuilder
         0     0% 83.17%    35.50MB  5.59%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).PutBatch
         0     0% 83.17%    10.50MB  1.65%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).storeViewRecord
         0     0% 83.17%    36.04MB  5.67%  github.com/voedger/voedger/pkg/istructsmem.(*commandFunction).Exec
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).build
         0     0% 83.17%    38.01MB  5.98%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).enumRecs
         0     0% 83.17%       16MB  2.52%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Build
         0     0% 83.17%        4MB  0.63%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Elements
         0     0% 83.17%    14.50MB  2.28%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build
         0     0% 83.17%    14.50MB  2.28%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build.func1
         0     0% 83.17%    16.50MB  2.60%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).forEach
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).BuildRawEvent
         0     0% 83.17%    38.01MB  5.98%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).CUDs
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).build
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).regenerateIDs
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).storeToBytes
         0     0% 83.17%       11MB  1.73%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals
         0     0% 83.17%     9.50MB  1.50%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).build
         0     0% 83.17%        6MB  0.94%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeToBytes
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/istructsmem.(*queryFunction).Exec
         0     0% 83.17%    24.03MB  3.78%  github.com/voedger/voedger/pkg/istructsmem.(*recordType).copyFrom (inline)
         0     0% 83.17%     5.51MB  0.87%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutFloat64
         0     0% 83.17%    12.02MB  1.89%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutNumber
         0     0% 83.17%    25.03MB  3.94%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom
         0     0% 83.17%    11.02MB  1.74%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom.func1
         0     0% 83.17%    17.50MB  2.75%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).loadFromBytes
         0     0% 83.17%    10.52MB  1.66%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).putValue
         0     0% 83.17%   107.02MB 16.84%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setDef
         0     0% 83.17%    89.02MB 14.01%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQName
         0     0% 83.17%       18MB  2.83%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQNameID
         0     0% 83.17%        6MB  0.94%  github.com/voedger/voedger/pkg/istructsmem.(*updateRecType).build
         0     0% 83.17%    11.50MB  1.81%  github.com/voedger/voedger/pkg/istructsmem.(*valueType).Build
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity.func1
         0     0% 83.17%    21.02MB  3.31%  github.com/voedger/voedger/pkg/istructsmem.FillElementFromJSON
         0     0% 83.17%       18MB  2.83%  github.com/voedger/voedger/pkg/istructsmem.loadRow
         0     0% 83.17%     3.50MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.newEventBuilder (inline)
         0     0% 83.17%     3.50MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.newRawEventBuilder
         0     0% 83.17%    25.53MB  4.02%  github.com/voedger/voedger/pkg/istructsmem.newUpdateRec
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/istructsmem.storeElement
         0     0% 83.17%        6MB  0.95%  github.com/voedger/voedger/pkg/istructsmem.storeEvent
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/istructsmem.storeEventArguments
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/istructsmem/internal/utils.SafeWriteBuf
         0     0% 83.17%    25.01MB  3.94%  github.com/voedger/voedger/pkg/itokens-payloads.(*implIAppTokens).ValidateToken
         0     0% 83.17%    25.01MB  3.94%  github.com/voedger/voedger/pkg/itokensjwt.(*JWTSigner).ValidateToken
         0     0% 83.17%    31.46MB  4.95%  github.com/voedger/voedger/pkg/parser.ParseFile
         0     0% 83.17%    31.46MB  4.95%  github.com/voedger/voedger/pkg/parser.parseImpl
         0     0% 83.17%    66.01MB 10.39%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doAsync
         0     0% 83.17%   429.52MB 67.60%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doSync
         0     0% 83.17%   423.02MB 66.58%  github.com/voedger/voedger/pkg/pipeline.(*implISyncOperatorSimple).DoSync
         0     0% 83.17%       10MB  1.57%  github.com/voedger/voedger/pkg/pipeline.(*serviceOperator).DoSync.func1
         0     0% 83.17%       16MB  2.52%  github.com/voedger/voedger/pkg/pipeline.p_flush
         0     0% 83.17%    82.01MB 12.91%  github.com/voedger/voedger/pkg/pipeline.puller_async
         0     0% 83.17%   427.51MB 67.28%  github.com/voedger/voedger/pkg/pipeline.puller_sync
         0     0% 83.17%    29.51MB  4.64%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).authenticate
         0     0% 83.17%     3.50MB  0.55%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).getRawEventBuilder
         0     0% 83.17%    22.01MB  3.46%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).putPLog
         0     0% 83.17%     4.50MB  0.71%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).validate.func2
         0     0% 83.17%     4.01MB  0.63%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).writeCUDs
         0     0% 83.17%    16.50MB  2.60%  github.com/voedger/voedger/pkg/processors/command.applyPLogEvent
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/processors/command.buildRawEvent
         0     0% 83.17%    36.04MB  5.67%  github.com/voedger/voedger/pkg/processors/command.execCommand
         0     0% 83.17%    37.02MB  5.83%  github.com/voedger/voedger/pkg/processors/command.getArgsObject
         0     0% 83.17%     3.50MB  0.55%  github.com/voedger/voedger/pkg/processors/command.getWSDesc
         0     0% 83.17%    15.51MB  2.44%  github.com/voedger/voedger/pkg/processors/command.putWLog
         0     0% 83.17%   113.77MB 17.90%  github.com/voedger/voedger/pkg/processors/command.unmarshalRequestBody
         0     0% 83.17%        4MB  0.63%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func13
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func14
         0     0% 83.17%     8.50MB  1.34%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func3
         0     0% 83.17%    24.50MB  3.86%  github.com/voedger/voedger/pkg/processors/query.operator.func1
         0     0% 83.17%        7MB  1.10%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).Run
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).keepReading
         0     0% 83.17%        5MB  0.79%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).keepReading.func1
         0     0% 83.17%    64.01MB 10.07%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).DoAsync
         0     0% 83.17%       16MB  2.52%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).Flush
         0     0% 83.17%       16MB  2.52%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).flush
         0     0% 83.17%     4.50MB  0.71%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).savePosition
         0     0% 83.17%    45.01MB  7.08%  github.com/voedger/voedger/pkg/projectors.newSyncBranch.func1
         0     0% 83.17%       27MB  4.25%  github.com/voedger/voedger/pkg/projectors.syncActualizerFactory.func3
         0     0% 83.17%    56.16MB  8.84%  github.com/voedger/voedger/pkg/router.corsHandler.func1
         0     0% 83.17%    54.66MB  8.60%  github.com/voedger/voedger/pkg/router.requestHandler.func1
         0     0% 83.17%     4.50MB  0.71%  github.com/voedger/voedger/pkg/state.(*bundleImpl).get
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/state.(*bundleImpl).put
         0     0% 83.17%     6.50MB  1.02%  github.com/voedger/voedger/pkg/state.(*bundledHostState).ApplyIntents
         0     0% 83.17%       21MB  3.31%  github.com/voedger/voedger/pkg/state.(*bundledHostState).CanExist
         0     0% 83.17%    11.50MB  1.81%  github.com/voedger/voedger/pkg/state.(*bundledHostState).FlushBundles
         0     0% 83.17%       27MB  4.25%  github.com/voedger/voedger/pkg/state.(*hostState).ApplyIntents
         0     0% 83.17%    25.50MB  4.01%  github.com/voedger/voedger/pkg/state.(*hostState).CanExist
         0     0% 83.17%    50.01MB  7.87%  github.com/voedger/voedger/pkg/state.(*hostState).KeyBuilder
         0     0% 83.17%       10MB  1.57%  github.com/voedger/voedger/pkg/state.(*hostState).MustExist
         0     0% 83.17%    18.50MB  2.91%  github.com/voedger/voedger/pkg/state.(*hostState).NewValue
         0     0% 83.17%    27.53MB  4.33%  github.com/voedger/voedger/pkg/state.(*hostState).UpdateValue
         0     0% 83.17%    27.53MB  4.33%  github.com/voedger/voedger/pkg/state.(*recordsStorage).ProvideValueBuilderForUpdate
         0     0% 83.17%     5.51MB  0.87%  github.com/voedger/voedger/pkg/state.(*recordsValueBuilder).PutFloat64
         0     0% 83.17%       11MB  1.73%  github.com/voedger/voedger/pkg/state.(*viewRecordsKeyBuilder).Equals
         0     0% 83.17%    12.50MB  1.97%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).Get
         0     0% 83.17%    11.50MB  1.81%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).Build (inline)
         0     0% 83.17%    11.50MB  1.81%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).BuildValue
         0     0% 83.17%     4.50MB  0.71%  github.com/voedger/voedger/pkg/sys/builtin.provideRefIntegrityValidator.func2
         0     0% 83.17%    14.50MB  2.28%  github.com/voedger/voedger/pkg/sys/journal.glob..func1
         0     0% 83.17%    31.13MB  4.90%  github.com/voedger/voedger/pkg/vvm.ProvideCluster
         0     0% 83.17%    28.63MB  4.51%  github.com/voedger/voedger/pkg/vvm.ProvideVVM
         0     0% 83.17%    26.96MB  4.24%  github.com/voedger/voedger/pkg/vvm.VVMAppsBuilder.Build
         0     0% 83.17%     6.63MB  1.04%  github.com/voedger/voedger/pkg/vvm.provideAppsWSAmounts
         0     0% 83.17%        8MB  1.26%  github.com/voedger/voedger/pkg/vvm.provideSubjectGetterFunc.func1
         0     0% 83.17%    21.46MB  3.38%  github.com/voedger/voedger/pkg/vvm.provideVVMApps (inline)
         0     0% 83.17%    66.32MB 10.44%  net/http.(*conn).serve
         0     0% 83.17%    57.82MB  9.10%  net/http.HandlerFunc.ServeHTTP
         0     0% 83.17%    60.82MB  9.57%  net/http.serverHandler.ServeHTTP
         0     0% 83.17%        7MB  1.10%  reflect.Value.SetMapIndex
         0     0% 83.17%   108.52MB 17.08%  sync.(*Pool).Get
