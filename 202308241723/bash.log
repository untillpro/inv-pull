+ echo 'Set up traps...'
Set up traps...
+ trap on_SIGINT SIGINT
+ trap on_ERR ERR
+ trap on_EXIT EXIT
+ source ssh-agent-start.sh
++ set -euo pipefail
++ key=/root/hetzner-performance-test
++ '[' -f /root/hetzner-performance-test ']'
++ eval 'SSH_AUTH_SOCK=/tmp/ssh-XXXXXXbKMNlr/agent.308198; export SSH_AUTH_SOCK;SSH_AGENT_PID=308199; export SSH_AGENT_PID;'
+++ SSH_AUTH_SOCK=/tmp/ssh-XXXXXXbKMNlr/agent.308198
+++ export SSH_AUTH_SOCK
+++ SSH_AGENT_PID=308199
+++ export SSH_AGENT_PID
++ echo 'ssh-agent started  and private key present.'
ssh-agent started  and private key present.
+ readonly const_SCYLLA_NODES=DBNode1,DBNode2,DBNode3
+ const_SCYLLA_NODES=DBNode1,DBNode2,DBNode3
+ readonly const_BP_NODE=AppNode
+ const_BP_NODE=AppNode
+ readonly const_BP3_EXEC_IMAGE_NAME=airs-bp
+ const_BP3_EXEC_IMAGE_NAME=airs-bp
+ readonly const_BP3_LOG=airs-bp_log.txt
+ const_BP3_LOG=airs-bp_log.txt
+ readonly const_ABOMBER_EXEC_IMAGE=abomber
+ const_ABOMBER_EXEC_IMAGE=abomber
+ export GOROOT=/root/.go
+ GOROOT=/root/.go
+ export PATH=/root/.go/bin:/root/go/bin:/root/.go/bin:/root/go/bin:/root/.go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+ PATH=/root/.go/bin:/root/go/bin:/root/.go/bin:/root/go/bin:/root/.go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+ write_scripts_sources_commit
++ git rev-parse HEAD
+ local -r commit_sha=e910d02f7419f4d816866fd0db663113fd916bd6
++ git remote get-url origin
+ local -r repository_url=https://github.com/maxim-ge/air-devops
++ echo https://github.com/maxim-ge/air-devops
++ sed -n 's/.*github.com\/\([^/]*\)\/.*/\1/p'
+ local -r username=maxim-ge
++ echo https://github.com/maxim-ge/air-devops
++ sed -n 's/.*github.com\/[^/]*\/\([^/]*\).*/\1/p'
+ local -r repository=air-devops
+ local -r permalink=https://github.com/maxim-ge/air-devops/blob/e910d02f7419f4d816866fd0db663113fd916bd6/perftest/docker/perftest-runner.sh
+ echo 'Result has been generated by this [perftest-runner.sh](https://github.com/maxim-ge/air-devops/blob/e910d02f7419f4d816866fd0db663113fd916bd6/perftest/docker/perftest-runner.sh)'
+ echo 'Recreate keyspaces for Air...'
Recreate keyspaces for Air...
++ echo DBNode1,DBNode2,DBNode3
++ cut -d, -f1
+ utils_keyspaces_drop root DBNode1
+ local SSHUser=root
+ local CQLHost=DBNode1
+ cql_script='
    DROP KEYSPACE IF EXISTS sysregistry;

    DROP KEYSPACE IF EXISTS sysmeta;

    DROP KEYSPACE IF EXISTS untillairsbp;

    DROP KEYSPACE IF EXISTS sysblobber;

    DROP KEYSPACE IF EXISTS sysrouter;'
+ cql_port=9042
+ echo 'Wait for Scylla to start on DBNode1...'
Wait for Scylla to start on DBNode1...
+ utils_ssh root@DBNode1 'docker exec "scylla-DBNode1" nodetool status | grep UN | wc -l | grep '\''^3$'\'''
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode1 'docker exec "scylla-DBNode1" nodetool status | grep UN | wc -l | grep '\''^3$'\'''
3
+ echo 'Scylla cluster ready'
Scylla cluster ready
+ echo 'Create keyspaces...'
Create keyspaces...
+ utils_ssh root@DBNode1
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode1
Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-70-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Thu Aug 24 05:23:46 PM UTC 2023

  System load:              0.27783203125
  Usage of /:               55.0% of 149.92GB
  Memory usage:             93%
  Swap usage:               0%
  Processes:                159
  Users logged in:          0
  IPv4 address for docker0: 172.17.0.1
  IPv4 address for enp7s0:  10.0.0.2
  IPv4 address for eth0:    49.13.16.214
  IPv6 address for eth0:    2a01:4f8:c012:4d0c::1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

54 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


*** System restart required ***
+ echo 'Drop scylla snapshots to clear not used disk space...'
Drop scylla snapshots to clear not used disk space...
+ utils_snapshots_drop root DBNode1,DBNode2,DBNode3
+ local SSHUser=root
+ local Nodes=DBNode1,DBNode2,DBNode3
+ '[' -z DBNode1,DBNode2,DBNode3 ']'
+ IFS=,
+ read -ra nodes_array
+ for node in "${nodes_array[@]}"
+ clear_snapshot DBNode1
+ local Node=DBNode1
+ echo 'Clearing snapshots on Node: DBNode1'
Clearing snapshots on Node: DBNode1
+ utils_ssh root@DBNode1 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode1 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
Requested clearing snapshot(s) for [all keyspaces]
+ for node in "${nodes_array[@]}"
+ clear_snapshot DBNode2
+ local Node=DBNode2
+ echo 'Clearing snapshots on Node: DBNode2'
Clearing snapshots on Node: DBNode2
+ utils_ssh root@DBNode2 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode2 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
Requested clearing snapshot(s) for [all keyspaces]
+ for node in "${nodes_array[@]}"
+ clear_snapshot DBNode3
+ local Node=DBNode3
+ echo 'Clearing snapshots on Node: DBNode3'
Clearing snapshots on Node: DBNode3
+ utils_ssh root@DBNode3 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode3 'docker exec -i $(docker ps -q --filter name=scylla) nodetool clearsnapshot'
Requested clearing snapshot(s) for [all keyspaces]
+ echo 'Drop airc-backoffice2 container...'
Drop airc-backoffice2 container...
+ utils_drop_container root AppNode bo-alpha
+ SSH_USER=root
+ host=AppNode
+ container_name=bo-alpha
+ [[ AppNode == \l\o\c\a\l\h\o\s\t ]]
+ utils_ssh root@AppNode 'docker ps --format '\''{{.Names}}'\'' | grep "bo-alpha"'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker ps --format '\''{{.Names}}'\'' | grep "bo-alpha"'
bo-alpha
+ utils_ssh root@AppNode docker stop bo-alpha
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode docker stop bo-alpha
bo-alpha
+ utils_ssh root@AppNode docker rm bo-alpha
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode docker rm bo-alpha
bo-alpha
+ echo 'Container bo-alpha removed remotely.'
Container bo-alpha removed remotely.
+ echo 'Update airc-backoffice2 image...'
Update airc-backoffice2 image...
+ utils_ssh root@AppNode 'docker pull untillpro/airc-backoffice2:alpha'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker pull untillpro/airc-backoffice2:alpha'
alpha: Pulling from untillpro/airc-backoffice2
Digest: sha256:b41015997f9003b2675c70ae597873c502b2fe416147b412e82cd8cb5aec9d13
Status: Image is up to date for untillpro/airc-backoffice2:alpha
docker.io/untillpro/airc-backoffice2:alpha
+ echo 'Deploy airc-backoffice2 image...'
Deploy airc-backoffice2 image...
+ utils_ssh root@AppNode 'docker run --name bo-alpha --volume /root/config.js:/usr/share/nginx/html/config.js -p 3030:80 -d untillpro/airc-backoffice2:alpha'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker run --name bo-alpha --volume /root/config.js:/usr/share/nginx/html/config.js -p 3030:80 -d untillpro/airc-backoffice2:alpha'
1c075291f5d35de6dfd2035e3100cc7615613bae89d696d14be5d0978f25e7a4
+ build_and_run_airs-bp
+ echo 'Drop airs-bp container...'
Drop airs-bp container...
+ utils_drop_container root AppNode airs-bp
+ SSH_USER=root
+ host=AppNode
+ container_name=airs-bp
+ [[ AppNode == \l\o\c\a\l\h\o\s\t ]]
+ utils_ssh root@AppNode 'docker ps --format '\''{{.Names}}'\'' | grep "airs-bp"'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker ps --format '\''{{.Names}}'\'' | grep "airs-bp"'
airs-bp
+ utils_ssh root@AppNode docker stop airs-bp
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode docker stop airs-bp
airs-bp
+ utils_ssh root@AppNode docker rm airs-bp
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode docker rm airs-bp
airs-bp
+ echo 'Container airs-bp removed remotely.'
Container airs-bp removed remotely.
+ echo 'pkill airs-bp process...'
pkill airs-bp process...
+ utils_ssh root@AppNode pkill airs-bp
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode pkill airs-bp
+ :
+ echo 'Copy secrets...'
Copy secrets...
+ utils_ssh root@AppNode 'sudo mkdir -p /run/secrets && echo "1234567812345678123456781234567812345678123456781234567812345678" 					| sudo tee /run/secrets/secretKeyJWT >/dev/null'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'sudo mkdir -p /run/secrets && echo "1234567812345678123456781234567812345678123456781234567812345678" 					| sudo tee /run/secrets/secretKeyJWT >/dev/null'
+ '[' -z '' ']'
+ echo 'Prepare and run airs-bp container...'
Prepare and run airs-bp container...
+ echo 'Update airs-bp image...'
Update airs-bp image...
+ utils_ssh root@AppNode 'docker pull untillpro/airs-bp:alpha'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker pull untillpro/airs-bp:alpha'
alpha: Pulling from untillpro/airs-bp
Digest: sha256:bfa0ded9afa945a9eff761944abebb82c11408854636acec1b2303e55ed59b21
Status: Image is up to date for untillpro/airs-bp:alpha
docker.io/untillpro/airs-bp:alpha
+ echo 'Deploy airs-bp container image...'
Deploy airs-bp container image...
+ utils_ssh root@AppNode 'docker run  --name airs-bp --volume /run/secrets:/run/secrets       -d --network=host untillpro/airs-bp:alpha /app/airs-bp       --use-cas --cas-hosts "DBNode1,DBNode2,DBNode3" --cas-port 9042 --chargebee-site-name "untillair-test"       --chargebee-key-secret "chargebee_key" --chargebee-aircluster "alpha" --vvm-port 80 --cp 1 --qp 1 --dc "dc1"       --cas-keyspace-with-replication "{ '\''class'\'': '\''NetworkTopologyStrategy'\'', '\''dc1'\'': 2, '\''dc2'\'': 1}"'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'docker run  --name airs-bp --volume /run/secrets:/run/secrets       -d --network=host untillpro/airs-bp:alpha /app/airs-bp       --use-cas --cas-hosts "DBNode1,DBNode2,DBNode3" --cas-port 9042 --chargebee-site-name "untillair-test"       --chargebee-key-secret "chargebee_key" --chargebee-aircluster "alpha" --vvm-port 80 --cp 1 --qp 1 --dc "dc1"       --cas-keyspace-with-replication "{ '\''class'\'': '\''NetworkTopologyStrategy'\'', '\''dc1'\'': 2, '\''dc2'\'': 1}"'
245c4fd121ada7c59d4d7bfb374c95062e46eb620d23508ffcc62831e18cfbb0
+ echo 'airs-bp started, wait for airs-bp initialization..'
airs-bp started, wait for airs-bp initialization..
+ local count=0
+ '[' 0 -lt 60 ']'
+ curl -s -o /dev/null -w '%{http_code}' -X POST http://AppNode/api/check -d ''
+ grep -q '^200$'
+ echo 'Still wait for Air initialization..'
Still wait for Air initialization..
+ sleep 5
+ count=1
+ '[' 1 -lt 60 ']'
+ curl -s -o /dev/null -w '%{http_code}' -X POST http://AppNode/api/check -d ''
+ grep -q '^200$'
+ echo 'Still wait for Air initialization..'
Still wait for Air initialization..
+ sleep 5
+ count=2
+ '[' 2 -lt 60 ']'
+ curl -s -o /dev/null -w '%{http_code}' -X POST http://AppNode/api/check -d ''
+ grep -q '^200$'
+ echo 'Still wait for Air initialization..'
Still wait for Air initialization..
+ sleep 5
+ count=3
+ '[' 3 -lt 60 ']'
+ curl -s -o /dev/null -w '%{http_code}' -X POST http://AppNode/api/check -d ''
+ grep -q '^200$'
+ echo 'Air initialization success'
Air initialization success
+ break
+ '[' 3 -eq 60 ']'
+ echo 'Air service is up!'
Air service is up!
+ prepare_abomber
+ echo 'Get secretKeyJWT from AppNode service...'
Get secretKeyJWT from AppNode service...
++ utils_ssh root@AppNode 'cat /run/secrets/secretKeyJWT'
+++ utils_SSH_OPTS
+++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
++ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode 'cat /run/secrets/secretKeyJWT'
+ secretKeyJWT=1234567812345678123456781234567812345678123456781234567812345678
+ sudo mkdir -p /run/secrets
+ echo 1234567812345678123456781234567812345678123456781234567812345678
+ sudo tee /run/secrets/secretKeyJWT
+ echo 'Secret key installed with success.'
Secret key installed with success.
+ echo 'Drop abomber container...'
Drop abomber container...
+ utils_drop_container root localhost abomber
+ SSH_USER=root
+ host=localhost
+ container_name=abomber
+ [[ localhost == \l\o\c\a\l\h\o\s\t ]]
+ docker ps --format '{{.Names}}'
+ grep abomber
+ docker ps -a --format '{{.Names}}'
+ grep abomber
+ echo 'Container abomber not found locally.'
Container abomber not found locally.
+ echo 'pkill abomber executable...'
pkill abomber executable...
+ pkill abomber
+ :
+ '[' -z '' ']'
+ echo 'Update abomber container image...'
Update abomber container image...
+ docker pull untillpro/abomber:alpha
alpha: Pulling from untillpro/abomber
Digest: sha256:b1f83b29cedbd5014ca92ac3b76eae2e45f7e8dd48c4f484d1edf92b589f8a28
Status: Image is up to date for untillpro/abomber:alpha
docker.io/untillpro/abomber:alpha
+ echo 'Prepare result folders...'
Prepare result folders...
+ bomber_result=/root/tmp/inv-pull/202308241723/abomber
+ profile_result=/root/tmp/inv-pull/202308241723/profiles
+ scylla_cur_config=/root/tmp/inv-pull/202308241723/scylla
+ mkdir -p /root/tmp/inv-pull/202308241723/abomber
+ mkdir -p /root/tmp/inv-pull/202308241723/profiles
+ mkdir -p /root/tmp/inv-pull/202308241723/scylla
+ echo 'Save airs-bp version...'
Save airs-bp version...
+ utils_ssh root@AppNode './airs-bp version'
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@AppNode './airs-bp version'
+ echo 'Save scylla.yaml...'
Save scylla.yaml...
+ IFS=,
+ read -ra const_SCYLLA_NODES_ARRAY
+ utils_scp root@DBNode1:/etc/scylla/scylla.yaml /root/tmp/inv-pull/202308241723/scylla/scylla.yaml
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode1:/etc/scylla/scylla.yaml /root/tmp/inv-pull/202308241723/scylla/scylla.yaml
+ echo 'Iterate over Scylla nodes and store dc configs...'
Iterate over Scylla nodes and store dc configs...
+ for scylla in "${const_SCYLLA_NODES_ARRAY[@]}"
+ utils_scp root@DBNode1:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode1.properties
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode1:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode1.properties
+ for scylla in "${const_SCYLLA_NODES_ARRAY[@]}"
+ utils_scp root@DBNode2:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode2.properties
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode2:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode2.properties
+ for scylla in "${const_SCYLLA_NODES_ARRAY[@]}"
+ utils_scp root@DBNode3:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode3.properties
++ utils_SSH_OPTS
++ echo '-q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
+ scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR root@DBNode3:/etc/scylla/cassandra-rackdc.properties /root/tmp/inv-pull/202308241723/scylla/cassandra-rackdc-DBNode3.properties
+ abomber_init
+ abomber_init_args=('init' '--LoginPrefix=my__login' '--NumLogins=1' '--NumLocationsPerLogin=1' '--Password=123456' '--ClusterURL=http://AppNode' '--jwt-key=/run/secrets/secretKeyJWT')
+ readonly abomber_init_args
+ '[' -z '' ']'
+ echo 'abomber init, using container...'
abomber init, using container...
+ docker run --volume /run/secrets/secretKeyJWT:/run/secrets/secretKeyJWT --volume /root/tmp/inv-pull/202308241723/abomber:/app/stats --network=host untillpro/abomber:alpha /app/bomber init --LoginPrefix=my__login --NumLogins=1 --NumLocationsPerLogin=1 --Password=123456 --ClusterURL=http://AppNode --jwt-key=/run/secrets/secretKeyJWT --out=/app/stats
+ echo 'Fork wait_and_get_profiles...'
Fork wait_and_get_profiles...
+ abomber_sales
+ sales_args=('sales' '--LoginPrefix=my__login' '--NumLogins=1' '--NumLocationsPerLogin=1' '--Password=123456' '--ClusterURL=http://AppNode' '--Duration=2m' '--OrdersPerLocationPerDay=2000')
+ wait_and_get_profiles AppNode
+ local -r sales_args
+ '[' -z '' ']'
+ echo 'abomber sales, using container...'
abomber sales, using container...
+ docker run --volume /run/secrets/secretKeyJWT:/run/secrets/secretKeyJWT --volume /root/tmp/inv-pull/202308241723/abomber:/app/stats --network=host untillpro/abomber:alpha /app/bomber sales --LoginPrefix=my__login --NumLogins=1 --NumLocationsPerLogin=1 --Password=123456 --ClusterURL=http://AppNode --Duration=2m --OrdersPerLocationPerDay=2000 --out=/app/stats
+ local -r value=2
+ local -r unit=m
+ local half=1
+ local -r remainder=0
+ [[ 0 -eq 1 ]]
+ echo 'Sleep 1m...'
Sleep 1m...
+ sleep 1m
+ echo 'Get debug info.'
Get debug info.
+ curl -o /root/tmp/inv-pull/202308241723/profiles/cpu.prof 'http://AppNode/debug/profile?seconds=10' --fail --silent --show-error
+ echo profile
profile
08/24 17:26:32.621: ===: [main.salesGoroutine:107]: sales created in workspace 140737488486400 for day 0
+ echo 'Save and process profiles...'
Save and process profiles...
+ curl -o /root/tmp/inv-pull/202308241723/profiles/heap.prof http:/AppNode/debug/heap --fail --silent --show-error
+ go tool pprof -alloc_objects -top /root/tmp/inv-pull/202308241723/profiles/heap.prof
+ go tool pprof -alloc_space -top /root/tmp/inv-pull/202308241723/profiles/heap.prof
+ go tool pprof -top /root/tmp/inv-pull/202308241723/profiles/cpu.prof
+ echo 'Performance test is done'
Performance test is done
+ '[' -d /root/tmp/inv-pull/.git ']'
+ echo 'Ref. git.log for details about commit and push'
Ref. git.log for details about commit and push
+ exit 0
+ on_EXIT
+ set +e
+ exec
