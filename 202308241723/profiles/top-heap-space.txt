File: airs-bp
Type: alloc_space
Time: Aug 24, 2023 at 5:26pm (UTC)
Showing nodes accounting for 490.07MB, 81.20% of 603.53MB total
Dropped 450 nodes (cum <= 3.02MB)
      flat  flat%   sum%        cum   cum%
   63.02MB 10.44% 10.44%    87.52MB 14.50%  github.com/untillpro/dynobuffers.glob..func1
   58.15MB  9.63% 20.08%    69.65MB 11.54%  encoding/json.(*decodeState).objectInterface
   40.55MB  6.72% 26.79%    42.05MB  6.97%  github.com/alecthomas/participle/v2.newTagLexer
   29.65MB  4.91% 31.71%    32.18MB  5.33%  github.com/alecthomas/participle/v2/lexer.Upgrade
   27.57MB  4.57% 36.27%    27.57MB  4.57%  io.ReadAll
   26.50MB  4.39% 40.67%    26.50MB  4.39%  github.com/google/flatbuffers/go.(*Builder).growByteBuffer (inline)
   24.50MB  4.06% 44.73%    24.50MB  4.06%  github.com/google/flatbuffers/go.NewBuilder (inline)
   14.53MB  2.41% 47.13%    14.53MB  2.41%  github.com/untillpro/dynobuffers.(*Buffer).prepareModifiedFields (inline)
   11.50MB  1.91% 49.04%    11.50MB  1.91%  github.com/alecthomas/participle/v2.(*parseContext).Defer (inline)
      11MB  1.82% 50.86%    11.50MB  1.91%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals.func1
    9.50MB  1.57% 52.44%     9.50MB  1.57%  encoding/json.unquote (inline)
       9MB  1.49% 53.93%        9MB  1.49%  github.com/gocql/gocql.newFramer (inline)
    8.50MB  1.41% 55.34%    40.01MB  6.63%  github.com/voedger/voedger/pkg/istructsmem.newKey
       8MB  1.33% 56.66%        8MB  1.33%  github.com/alecthomas/participle/v2.(*parseContext).Branch (inline)
       8MB  1.33% 57.99%        8MB  1.33%  time.NewTimer
    7.51MB  1.24% 59.23%     7.51MB  1.24%  bytes.growSlice
    7.51MB  1.24% 60.47%    22.52MB  3.73%  github.com/gocql/gocql.(*Conn).executeBatch
    7.50MB  1.24% 61.72%     7.50MB  1.24%  github.com/voedger/voedger/pkg/parser.iterate
    7.01MB  1.16% 62.88%     7.51MB  1.24%  github.com/gocql/gocql.(*framer).writeBytes (inline)
       7MB  1.16% 64.04%        7MB  1.16%  net/textproto.readMIMEHeader
    6.50MB  1.08% 65.12%    34.01MB  5.63%  github.com/voedger/voedger/pkg/istructsmem.newValue
       6MB  0.99% 66.11%        6MB  0.99%  reflect.mapassign_faststr
       6MB  0.99% 67.11%    35.50MB  5.88%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).build
    5.50MB  0.91% 68.02%    13.01MB  2.16%  bytes.(*Buffer).grow
       5MB  0.83% 68.85%    34.01MB  5.64%  github.com/alecthomas/participle/v2.(*sequence).Parse
       5MB  0.83% 69.67%        5MB  0.83%  encoding/base64.(*Encoding).DecodeString
       5MB  0.83% 70.50%        5MB  0.83%  github.com/voedger/voedger/pkg/istructsmem.(*validators).validKey
    4.50MB  0.75% 71.25%     4.50MB  0.75%  github.com/VictoriaMetrics/fastcache.(*bucket).Get
    4.50MB  0.75% 71.99%    23.52MB  3.90%  github.com/gocql/gocql.(*Conn).exec
       4MB  0.66% 72.66%        4MB  0.66%  github.com/gocql/gocql.(*preparedLRU).keyFor (inline)
       4MB  0.66% 73.32%        4MB  0.66%  reflect.New
    3.50MB  0.58% 73.90%     3.50MB  0.58%  github.com/voedger/voedger/pkg/pipeline.forkOperator.DoSync
    3.50MB  0.58% 74.48%    12.03MB  1.99%  github.com/gocql/gocql.(*Conn).recv
       3MB   0.5% 74.98%     3.50MB  0.58%  github.com/gocql/gocql.(*queryMetrics).hostMetricsLocked
       3MB   0.5% 75.47%     4.51MB  0.75%  github.com/alecthomas/participle/v2.visit
    2.50MB  0.41% 75.89%    73.65MB 12.20%  encoding/json.Unmarshal
    2.50MB  0.41% 76.30%     3.50MB  0.58%  github.com/untillpro/ibusmem.(*bus).SendRequest2
       2MB  0.33% 76.63%    14.01MB  2.32%  github.com/gocql/gocql.(*Conn).executeQuery
       2MB  0.33% 76.97%     7.50MB  1.24%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).ElementBuilder
    1.50MB  0.25% 77.21%    72.06MB 11.94%  github.com/alecthomas/participle/v2.(*generatorContext).parseCapture
    1.50MB  0.25% 77.46%    24.51MB  4.06%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Get
    1.50MB  0.25% 77.71%        7MB  1.16%  github.com/alecthomas/participle/v2.(*generatorContext).parseLiteral
    1.50MB  0.25% 77.96%       19MB  3.15%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ProvideValueBuilder
    1.50MB  0.25% 78.21%     4.50MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeViewClustKey
       1MB  0.17% 78.37%     9.50MB  1.57%  net/http.(*conn).readRequest
       1MB  0.17% 78.54%     9.51MB  1.58%  github.com/alecthomas/participle/v2.lexStruct
       1MB  0.17% 78.71%     6.50MB  1.08%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).validate
       1MB  0.17% 78.87%    59.64MB  9.88%  encoding/json.(*decodeState).arrayInterface
       1MB  0.17% 79.04%       25MB  4.14%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4
       1MB  0.17% 79.20%    33.01MB  5.47%  github.com/alecthomas/participle/v2.(*capture).Parse
       1MB  0.17% 79.37%    34.01MB  5.64%  github.com/alecthomas/participle/v2.(*strct).Parse
       1MB  0.17% 79.53%    15.01MB  2.49%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).Put
       1MB  0.17% 79.70%    33.03MB  5.47%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).PutBatch
       1MB  0.17% 79.87%     7.51MB  1.24%  github.com/voedger/voedger/pkg/istructsmem.storeRow
    0.54MB  0.09% 79.96%    54.79MB  9.08%  github.com/voedger/voedger/pkg/apps.Parse
    0.51MB 0.085% 80.04%     3.51MB  0.58%  github.com/alecthomas/participle/v2.validate.func1
    0.50MB 0.083% 80.12%    33.51MB  5.55%  github.com/alecthomas/participle/v2.(*group).Parse
    0.50MB 0.083% 80.21%    16.02MB  2.65%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).Update
    0.50MB 0.083% 80.29%     8.50MB  1.41%  net/http.readRequest
    0.50MB 0.083% 80.37%    35.51MB  5.88%  github.com/voedger/voedger/pkg/iauthnzimpl.(*implIAuthenticator).Authenticate
    0.50MB 0.083% 80.45%       35MB  5.80%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).PutBatch
    0.50MB 0.083% 80.54%        6MB  0.99%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity
    0.50MB 0.083% 80.62%    42.54MB  7.05%  github.com/alecthomas/participle/v2.(*structLexer).Peek
    0.50MB 0.083% 80.70%       13MB  2.15%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3
    0.50MB 0.083% 80.79%    34.51MB  5.72%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).NewKeyBuilder
    0.50MB 0.083% 80.87%       29MB  4.81%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do
    0.50MB 0.083% 80.95%    72.56MB 12.02%  github.com/alecthomas/participle/v2.(*generatorContext).parseSequence
    0.50MB 0.083% 81.03%     5.51MB  0.91%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutNumber
    0.50MB 0.083% 81.12%    19.01MB  3.15%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).putPLog
    0.50MB 0.083% 81.20%       12MB  1.99%  github.com/voedger/voedger/pkg/state.(*recordsStorage).Get
         0     0% 81.20%    12.51MB  2.07%  bytes.(*Buffer).Write
         0     0% 81.20%        8MB  1.33%  encoding/json.(*Decoder).Decode
         0     0% 81.20%     9.52MB  1.58%  encoding/json.(*decodeState).array
         0     0% 81.20%    78.65MB 13.03%  encoding/json.(*decodeState).object
         0     0% 81.20%    78.65MB 13.03%  encoding/json.(*decodeState).unmarshal
         0     0% 81.20%    78.65MB 13.03%  encoding/json.(*decodeState).value
         0     0% 81.20%    59.64MB  9.88%  encoding/json.(*decodeState).valueInterface
         0     0% 81.20%     4.50MB  0.75%  github.com/VictoriaMetrics/fastcache.(*Cache).HasGet
         0     0% 81.20%    28.51MB  4.72%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseFromLexer
         0     0% 81.20%    36.72MB  6.08%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseString
         0     0% 81.20%    36.17MB  5.99%  github.com/alecthomas/participle/v2.(*Parser[...]).parse
         0     0% 81.20%    29.51MB  4.89%  github.com/alecthomas/participle/v2.(*Parser[...]).parseInto
         0     0% 81.20%    29.01MB  4.81%  github.com/alecthomas/participle/v2.(*Parser[...]).parseOne
         0     0% 81.20%    32.51MB  5.39%  github.com/alecthomas/participle/v2.(*disjunction).Parse
         0     0% 81.20%    72.56MB 12.02%  github.com/alecthomas/participle/v2.(*generatorContext).parseDisjunction
         0     0% 81.20%    28.02MB  4.64%  github.com/alecthomas/participle/v2.(*generatorContext).parseGroup
         0     0% 81.20%    13.51MB  2.24%  github.com/alecthomas/participle/v2.(*generatorContext).parseModifier
         0     0% 81.20%    72.56MB 12.02%  github.com/alecthomas/participle/v2.(*generatorContext).parseTerm
         0     0% 81.20%    72.56MB 12.02%  github.com/alecthomas/participle/v2.(*generatorContext).parseTermNoModifiers
         0     0% 81.20%    73.06MB 12.11%  github.com/alecthomas/participle/v2.(*generatorContext).parseType
         0     0% 81.20%    26.02MB  4.31%  github.com/alecthomas/participle/v2.(*generatorContext).subparseGroup
         0     0% 81.20%    17.02MB  2.82%  github.com/alecthomas/participle/v2.(*structLexer).Next
         0     0% 81.20%    21.02MB  3.48%  github.com/alecthomas/participle/v2.Build[...]
         0     0% 81.20%    19.52MB  3.23%  github.com/alecthomas/participle/v2.MustBuild[...] (inline)
         0     0% 81.20%     4.51MB  0.75%  github.com/alecthomas/participle/v2.visit.func1
         0     0% 81.20%    22.52MB  3.73%  github.com/gocql/gocql.(*Batch).execute
         0     0% 81.20%        4MB  0.66%  github.com/gocql/gocql.(*Conn).prepareStatement
         0     0% 81.20%    12.03MB  1.99%  github.com/gocql/gocql.(*Conn).serve
         0     0% 81.20%    14.51MB  2.40%  github.com/gocql/gocql.(*Query).Exec
         0     0% 81.20%    16.01MB  2.65%  github.com/gocql/gocql.(*Query).Iter
         0     0% 81.20%    14.01MB  2.32%  github.com/gocql/gocql.(*Query).execute
         0     0% 81.20%    25.02MB  4.15%  github.com/gocql/gocql.(*Session).ExecuteBatch
         0     0% 81.20%    25.02MB  4.15%  github.com/gocql/gocql.(*Session).executeBatch
         0     0% 81.20%    16.01MB  2.65%  github.com/gocql/gocql.(*Session).executeQuery
         0     0% 81.20%     5.01MB  0.83%  github.com/gocql/gocql.(*framer).writeBatchFrame
         0     0% 81.20%     5.01MB  0.83%  github.com/gocql/gocql.(*framer).writeExecuteFrame
         0     0% 81.20%     5.01MB  0.83%  github.com/gocql/gocql.(*framer).writeQueryParams
         0     0% 81.20%    40.03MB  6.63%  github.com/gocql/gocql.(*queryExecutor).attemptQuery
         0     0% 81.20%    40.03MB  6.63%  github.com/gocql/gocql.(*queryExecutor).do
         0     0% 81.20%    41.03MB  6.80%  github.com/gocql/gocql.(*queryExecutor).executeQuery
         0     0% 81.20%     3.50MB  0.58%  github.com/gocql/gocql.(*queryMetrics).attempt
         0     0% 81.20%     5.01MB  0.83%  github.com/gocql/gocql.(*writeBatchFrame).buildFrame
         0     0% 81.20%     5.01MB  0.83%  github.com/gocql/gocql.(*writeExecuteFrame).buildFrame
         0     0% 81.20%    18.51MB  3.07%  github.com/golang-jwt/jwt.(*Parser).Parse (inline)
         0     0% 81.20%    13.50MB  2.24%  github.com/golang-jwt/jwt.(*Parser).ParseUnverified
         0     0% 81.20%    18.51MB  3.07%  github.com/golang-jwt/jwt.(*Parser).ParseWithClaims
         0     0% 81.20%    18.51MB  3.07%  github.com/golang-jwt/jwt.Parse
         0     0% 81.20%        8MB  1.33%  github.com/google/flatbuffers/go.(*Builder).EndObject (inline)
         0     0% 81.20%       11MB  1.82%  github.com/google/flatbuffers/go.(*Builder).Finish (inline)
         0     0% 81.20%    26.50MB  4.39%  github.com/google/flatbuffers/go.(*Builder).Prep
         0     0% 81.20%        6MB  0.99%  github.com/google/flatbuffers/go.(*Builder).PrependInt64
         0     0% 81.20%        7MB  1.16%  github.com/google/flatbuffers/go.(*Builder).PrependVOffsetT
         0     0% 81.20%        8MB  1.33%  github.com/google/flatbuffers/go.(*Builder).WriteVtable
         0     0% 81.20%       11MB  1.82%  github.com/google/flatbuffers/go.(*Builder).finish
         0     0% 81.20%    42.23MB  7.00%  github.com/gorilla/mux.(*Router).ServeHTTP
         0     0% 81.20%    41.84MB  6.93%  github.com/untillpro/airs-bp3/airsbp3.buildVVM
         0     0% 81.20%    39.78MB  6.59%  github.com/untillpro/airs-bp3/apps/untill/airsbp.ProvideAirsBP.func1
         0     0% 81.20%     5.51MB  0.91%  github.com/untillpro/airs-bp3/packages/air.Provide
         0     0% 81.20%        5MB  0.83%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*articleService).isPromoArticle
         0     0% 81.20%        5MB  0.83%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do.func3
         0     0% 81.20%     6.50MB  1.08%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyOrders
         0     0% 81.20%     3.50MB  0.58%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyWaiters
         0     0% 81.20%        6MB  0.99%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateHourlySales
         0     0% 81.20%       29MB  4.81%  github.com/untillpro/airs-bp3/packages/air/dashboard.glob..func1
         0     0% 81.20%    11.01MB  1.82%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdOrders
         0     0% 81.20%    10.01MB  1.66%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdPbill
         0     0% 81.20%     8.50MB  1.41%  github.com/untillpro/airs-bp3/packages/air/pbilldates.glob..func1
         0     0% 81.20%    12.50MB  2.07%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.1
         0     0% 81.20%        9MB  1.49%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.2
         0     0% 81.20%       24MB  3.98%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.1
         0     0% 81.20%       13MB  2.15%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.2
         0     0% 81.20%    30.73MB  5.09%  github.com/untillpro/airs-bp3/packages/untill.Provide (inline)
         0     0% 81.20%     7.02MB  1.16%  github.com/untillpro/dynobuffers.(*Buffer).IterateFields
         0     0% 81.20%    14.53MB  2.41%  github.com/untillpro/dynobuffers.(*Buffer).Set (inline)
         0     0% 81.20%    29.50MB  4.89%  github.com/untillpro/dynobuffers.(*Buffer).ToBytes
         0     0% 81.20%    29.50MB  4.89%  github.com/untillpro/dynobuffers.(*Buffer).ToBytesNilled
         0     0% 81.20%    29.50MB  4.89%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer
         0     0% 81.20%    14.53MB  2.41%  github.com/untillpro/dynobuffers.(*Buffer).set
         0     0% 81.20%    87.52MB 14.50%  github.com/untillpro/dynobuffers.NewBuffer
         0     0% 81.20%     8.50MB  1.41%  github.com/untillpro/dynobuffers.encodeFixedSizeValue
         0     0% 81.20%    87.52MB 14.50%  github.com/untillpro/dynobuffers.getBuffer (inline)
         0     0% 81.20%        9MB  1.49%  github.com/voedger/voedger/pkg/appdef.(*fields).Fields
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/apps/sys/blobber.Provide.func1
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/apps/sys/router.Provide.func1
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Get
         0     0% 81.20%    15.51MB  2.57%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Put
         0     0% 81.20%    33.53MB  5.56%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).PutBatch
         0     0% 81.20%     4.51MB  0.75%  github.com/voedger/voedger/pkg/istoragecache.(*implCachingAppStorageProvider).AppStorage
         0     0% 81.20%     5.05MB  0.84%  github.com/voedger/voedger/pkg/istructsmem.(*AppConfigType).prepare
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).GetNewRawEventBuilder
         0     0% 81.20%    18.51MB  3.07%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutPlog
         0     0% 81.20%        7MB  1.16%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutWlog
         0     0% 81.20%    10.50MB  1.74%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply
         0     0% 81.20%    10.50MB  1.74%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply2
         0     0% 81.20%        5MB  0.83%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).GetSingleton
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).getRecord
         0     0% 81.20%        9MB  1.49%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).putRecordsBatch
         0     0% 81.20%     8.55MB  1.42%  github.com/voedger/voedger/pkg/istructsmem.(*appStructsProviderType).AppStructs
         0     0% 81.20%       23MB  3.81%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).Get
         0     0% 81.20%    40.01MB  6.63%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).KeyBuilder
         0     0% 81.20%    17.50MB  2.90%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).NewValueBuilder
         0     0% 81.20%       13MB  2.15%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).storeViewRecord
         0     0% 81.20%    21.02MB  3.48%  github.com/voedger/voedger/pkg/istructsmem.(*commandFunction).Exec
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).build
         0     0% 81.20%    29.01MB  4.81%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).enumRecs
         0     0% 81.20%        9MB  1.49%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Build
         0     0% 81.20%     5.50MB  0.91%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Elements
         0     0% 81.20%        9MB  1.49%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build
         0     0% 81.20%        9MB  1.49%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build.func1
         0     0% 81.20%     9.50MB  1.57%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).forEach
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).BuildRawEvent
         0     0% 81.20%    29.01MB  4.81%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).CUDs
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).build
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).regenerateIDs
         0     0% 81.20%     7.01MB  1.16%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).storeToBytes
         0     0% 81.20%       15MB  2.49%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals
         0     0% 81.20%       12MB  1.99%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).build
         0     0% 81.20%     7.50MB  1.24%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeToBytes
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/istructsmem.(*queryFunction).Exec
         0     0% 81.20%    15.52MB  2.57%  github.com/voedger/voedger/pkg/istructsmem.(*recordType).copyFrom (inline)
         0     0% 81.20%    16.02MB  2.65%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom
         0     0% 81.20%     7.02MB  1.16%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom.func1
         0     0% 81.20%       18MB  2.98%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).loadFromBytes
         0     0% 81.20%     4.51MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).putValue
         0     0% 81.20%    87.52MB 14.50%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setDef
         0     0% 81.20%    69.51MB 11.52%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQName
         0     0% 81.20%       18MB  2.98%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQNameID
         0     0% 81.20%        8MB  1.33%  github.com/voedger/voedger/pkg/istructsmem.(*valueType).Build
         0     0% 81.20%     5.50MB  0.91%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity.func1
         0     0% 81.20%    13.01MB  2.16%  github.com/voedger/voedger/pkg/istructsmem.FillElementFromJSON
         0     0% 81.20%       18MB  2.98%  github.com/voedger/voedger/pkg/istructsmem.loadRow
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/istructsmem.newEventBuilder (inline)
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/istructsmem.newRawEventBuilder
         0     0% 81.20%    15.52MB  2.57%  github.com/voedger/voedger/pkg/istructsmem.newUpdateRec
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/istructsmem.storeElement
         0     0% 81.20%     7.01MB  1.16%  github.com/voedger/voedger/pkg/istructsmem.storeEvent
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/istructsmem.storeEventArguments
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/istructsmem.storeEventCUDs
         0     0% 81.20%     4.04MB  0.67%  github.com/voedger/voedger/pkg/istructsmem/internal/qnames.(*QNames).Prepare
         0     0% 81.20%     3.52MB  0.58%  github.com/voedger/voedger/pkg/istructsmem/internal/qnames.(*QNames).store
         0     0% 81.20%    10.01MB  1.66%  github.com/voedger/voedger/pkg/istructsmem/internal/utils.SafeWriteBuf
         0     0% 81.20%    22.51MB  3.73%  github.com/voedger/voedger/pkg/itokens-payloads.(*implIAppTokens).ValidateToken
         0     0% 81.20%    22.51MB  3.73%  github.com/voedger/voedger/pkg/itokensjwt.(*JWTSigner).ValidateToken
         0     0% 81.20%     8.50MB  1.41%  github.com/voedger/voedger/pkg/parser.(*SchemaAST).Iterate
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/parser.(*buildContext).addFieldRefToDef
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/parser.(*buildContext).addTableItems
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.(*buildContext).build
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.(*buildContext).checkReference
         0     0% 81.20%     5.50MB  0.91%  github.com/voedger/voedger/pkg/parser.(*buildContext).fillTable
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/parser.(*buildContext).table
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.(*buildContext).tables
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/parser.(*buildContext).tables.func1
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.BuildAppDefs (inline)
         0     0% 81.20%    55.25MB  9.15%  github.com/voedger/voedger/pkg/parser.ParseFile
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.buildAppDefs
         0     0% 81.20%     7.50MB  1.24%  github.com/voedger/voedger/pkg/parser.iterate.func1
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.iterateStmt[...]
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.iterateStmt[...].func1
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.lookup[...]
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.lookup[...].func1
         0     0% 81.20%    58.25MB  9.65%  github.com/voedger/voedger/pkg/parser.parseImpl
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/parser.resolveTable
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/parser.resolve[...]
         0     0% 81.20%    63.01MB 10.44%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doAsync
         0     0% 81.20%   336.56MB 55.76%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doSync
         0     0% 81.20%   332.56MB 55.10%  github.com/voedger/voedger/pkg/pipeline.(*implISyncOperatorSimple).DoSync
         0     0% 81.20%     7.50MB  1.24%  github.com/voedger/voedger/pkg/pipeline.(*serviceOperator).DoSync.func1
         0     0% 81.20%    11.50MB  1.91%  github.com/voedger/voedger/pkg/pipeline.p_flush
         0     0% 81.20%    75.01MB 12.43%  github.com/voedger/voedger/pkg/pipeline.puller_async
         0     0% 81.20%   335.06MB 55.52%  github.com/voedger/voedger/pkg/pipeline.puller_sync
         0     0% 81.20%    29.51MB  4.89%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).authenticate
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).getRawEventBuilder
         0     0% 81.20%       10MB  1.66%  github.com/voedger/voedger/pkg/processors/command.applyPLogEvent
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/processors/command.buildRawEvent
         0     0% 81.20%     4.50MB  0.75%  github.com/voedger/voedger/pkg/processors/command.checkArgsRefIntegrity
         0     0% 81.20%    21.02MB  3.48%  github.com/voedger/voedger/pkg/processors/command.execCommand
         0     0% 81.20%    22.01MB  3.65%  github.com/voedger/voedger/pkg/processors/command.getArgsObject
         0     0% 81.20%        7MB  1.16%  github.com/voedger/voedger/pkg/processors/command.putWLog
         0     0% 81.20%    70.15MB 11.62%  github.com/voedger/voedger/pkg/processors/command.unmarshalRequestBody
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func14
         0     0% 81.20%        6MB  0.99%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func3
         0     0% 81.20%    18.51MB  3.07%  github.com/voedger/voedger/pkg/processors/query.operator.func1
         0     0% 81.20%        5MB  0.83%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).Run
         0     0% 81.20%    61.01MB 10.11%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).DoAsync
         0     0% 81.20%    11.50MB  1.91%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).Flush
         0     0% 81.20%    11.50MB  1.91%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).flush
         0     0% 81.20%        4MB  0.66%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).savePosition
         0     0% 81.20%    40.51MB  6.71%  github.com/voedger/voedger/pkg/projectors.newSyncBranch.func1
         0     0% 81.20%       29MB  4.81%  github.com/voedger/voedger/pkg/projectors.syncActualizerFactory.func3
         0     0% 81.20%    37.08MB  6.14%  github.com/voedger/voedger/pkg/router.corsHandler.func1
         0     0% 81.20%    27.57MB  4.57%  github.com/voedger/voedger/pkg/router.createRequest
         0     0% 81.20%    35.58MB  5.89%  github.com/voedger/voedger/pkg/router.requestHandler.func1
         0     0% 81.20%        7MB  1.16%  github.com/voedger/voedger/pkg/state.(*bundleImpl).get
         0     0% 81.20%        8MB  1.33%  github.com/voedger/voedger/pkg/state.(*bundleImpl).put
         0     0% 81.20%        8MB  1.33%  github.com/voedger/voedger/pkg/state.(*bundledHostState).ApplyIntents
         0     0% 81.20%       24MB  3.98%  github.com/voedger/voedger/pkg/state.(*bundledHostState).CanExist
         0     0% 81.20%     7.50MB  1.24%  github.com/voedger/voedger/pkg/state.(*bundledHostState).FlushBundles
         0     0% 81.20%       29MB  4.81%  github.com/voedger/voedger/pkg/state.(*hostState).ApplyIntents
         0     0% 81.20%    28.50MB  4.72%  github.com/voedger/voedger/pkg/state.(*hostState).CanExist
         0     0% 81.20%    35.01MB  5.80%  github.com/voedger/voedger/pkg/state.(*hostState).KeyBuilder
         0     0% 81.20%        7MB  1.16%  github.com/voedger/voedger/pkg/state.(*hostState).MustExist
         0     0% 81.20%       19MB  3.15%  github.com/voedger/voedger/pkg/state.(*hostState).NewValue
         0     0% 81.20%    16.02MB  2.65%  github.com/voedger/voedger/pkg/state.(*hostState).UpdateValue
         0     0% 81.20%    16.02MB  2.65%  github.com/voedger/voedger/pkg/state.(*recordsStorage).ProvideValueBuilderForUpdate
         0     0% 81.20%       15MB  2.49%  github.com/voedger/voedger/pkg/state.(*viewRecordsKeyBuilder).Equals
         0     0% 81.20%       35MB  5.80%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ApplyBatch
         0     0% 81.20%    16.50MB  2.73%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).Get
         0     0% 81.20%        8MB  1.33%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).Build (inline)
         0     0% 81.20%        8MB  1.33%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).BuildValue
         0     0% 81.20%    17.56MB  2.91%  github.com/voedger/voedger/pkg/sys.Provide
         0     0% 81.20%     3.50MB  0.58%  github.com/voedger/voedger/pkg/sys/authnz/signupin.ProvideCDocLogin (inline)
         0     0% 81.20%     5.50MB  0.91%  github.com/voedger/voedger/pkg/sys/authnz/workspace.qcwbnQryExec
         0     0% 81.20%     5.04MB  0.83%  github.com/voedger/voedger/pkg/sys/blobber.ProvideBlobberCmds
         0     0% 81.20%    10.50MB  1.74%  github.com/voedger/voedger/pkg/sys/journal.glob..func1
         0     0% 81.20%    54.84MB  9.09%  github.com/voedger/voedger/pkg/vvm.ProvideCluster
         0     0% 81.20%    45.34MB  7.51%  github.com/voedger/voedger/pkg/vvm.ProvideVVM
         0     0% 81.20%    48.29MB  8.00%  github.com/voedger/voedger/pkg/vvm.VVMAppsBuilder.Build
         0     0% 81.20%        7MB  1.16%  github.com/voedger/voedger/pkg/vvm.buildSchemasASTs
         0     0% 81.20%     5.54MB  0.92%  github.com/voedger/voedger/pkg/vvm.provideAppsWSAmounts
         0     0% 81.20%     9.50MB  1.57%  github.com/voedger/voedger/pkg/vvm.provideSubjectGetterFunc.func1
         0     0% 81.20%    45.29MB  7.50%  github.com/voedger/voedger/pkg/vvm.provideVVMApps (inline)
         0     0% 81.20%    51.74MB  8.57%  net/http.(*conn).serve
         0     0% 81.20%    38.23MB  6.33%  net/http.HandlerFunc.ServeHTTP
         0     0% 81.20%    42.23MB  7.00%  net/http.serverHandler.ServeHTTP
         0     0% 81.20%        7MB  1.16%  net/textproto.(*Reader).ReadMIMEHeader (inline)
         0     0% 81.20%        6MB  0.99%  reflect.Value.SetMapIndex
         0     0% 81.20%     3.50MB  0.58%  regexp.Compile (inline)
         0     0% 81.20%     3.50MB  0.58%  regexp.compile
         0     0% 81.20%    87.52MB 14.50%  sync.(*Pool).Get
         0     0% 81.20%     3.50MB  0.58%  time.After
