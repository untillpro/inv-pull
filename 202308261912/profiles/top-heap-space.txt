File: airs-bp
Type: alloc_space
Time: Aug 26, 2023 at 7:15pm (UTC)
Showing nodes accounting for 597.57MB, 82.01% of 728.68MB total
Dropped 445 nodes (cum <= 3.64MB)
      flat  flat%   sum%        cum   cum%
  107.80MB 14.79% 14.79%   117.80MB 16.17%  encoding/json.(*decodeState).objectInterface
   67.02MB  9.20% 23.99%    86.02MB 11.80%  github.com/untillpro/dynobuffers.glob..func1
   44.16MB  6.06% 30.05%    44.16MB  6.06%  io.ReadAll
   39.86MB  5.47% 35.52%    45.39MB  6.23%  github.com/alecthomas/participle/v2/lexer.Upgrade
   39.55MB  5.43% 40.95%    40.05MB  5.50%  github.com/alecthomas/participle/v2.newTagLexer
   33.50MB  4.60% 45.55%    33.50MB  4.60%  github.com/google/flatbuffers/go.(*Builder).growByteBuffer (inline)
   26.55MB  3.64% 49.19%    26.55MB  3.64%  github.com/untillpro/dynobuffers.(*Buffer).prepareModifiedFields (inline)
      19MB  2.61% 51.80%       19MB  2.61%  github.com/google/flatbuffers/go.NewBuilder (inline)
   13.50MB  1.85% 53.65%    13.50MB  1.85%  github.com/alecthomas/participle/v2.(*parseContext).Branch (inline)
      12MB  1.65% 55.30%    48.51MB  6.66%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).build
    9.53MB  1.31% 56.60%    10.03MB  1.38%  github.com/gocql/gocql.(*framer).writeBytes (inline)
    9.50MB  1.30% 57.91%    31.51MB  4.32%  github.com/voedger/voedger/pkg/istructsmem.newValue
    9.50MB  1.30% 59.21%    10.50MB  1.44%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals.func1
    9.50MB  1.30% 60.52%       10MB  1.37%  github.com/voedger/voedger/pkg/parser.iterate
    8.50MB  1.17% 61.68%        9MB  1.24%  time.NewTimer
       8MB  1.10% 62.78%        8MB  1.10%  encoding/base64.(*Encoding).DecodeString
       8MB  1.10% 63.88%    25.52MB  3.50%  github.com/gocql/gocql.(*Conn).executeBatch
    7.50MB  1.03% 64.91%     7.50MB  1.03%  reflect.mapassign_faststr
    6.50MB  0.89% 65.80%     6.50MB  0.89%  bytes.growSlice
    6.50MB  0.89% 66.69%    47.01MB  6.45%  github.com/voedger/voedger/pkg/istructsmem.newKey
    6.50MB  0.89% 67.59%     6.50MB  0.89%  encoding/json.unquote (inline)
       6MB  0.82% 68.41%        6MB  0.82%  github.com/alecthomas/participle/v2.(*parseContext).Defer (inline)
       6MB  0.82% 69.23%        6MB  0.82%  github.com/gocql/gocql.newFramer (inline)
       6MB  0.82% 70.06%    31.04MB  4.26%  github.com/gocql/gocql.(*Conn).exec
    5.50MB  0.75% 70.81%     5.50MB  0.75%  github.com/gocql/gocql.(*Session).NewBatch
       5MB  0.69% 71.50%        5MB  0.69%  github.com/VictoriaMetrics/fastcache.(*bucket).Get
       5MB  0.69% 72.18%        5MB  0.69%  reflect.New
    4.51MB  0.62% 72.80%     4.51MB  0.62%  github.com/gocql/gocql.appendLong (inline)
       4MB  0.55% 73.35%    33.01MB  4.53%  github.com/alecthomas/participle/v2.(*sequence).Parse
       4MB  0.55% 73.90%     4.50MB  0.62%  github.com/gocql/gocql.(*queryMetrics).hostMetricsLocked
       4MB  0.55% 74.45%        4MB  0.55%  github.com/voedger/voedger/pkg/pipeline.forkOperator.DoSync
       4MB  0.55% 75.00%    41.52MB  5.70%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).PutBatch
    3.50MB  0.48% 75.48%    21.50MB  2.95%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ProvideValueBuilder
    3.07MB  0.42% 75.90%     4.57MB  0.63%  github.com/alecthomas/participle/v2.validate.func1
       3MB  0.41% 76.31%     4.50MB  0.62%  github.com/golang-jwt/jwt.(*SigningMethodHMAC).Verify
       3MB  0.41% 76.72%   125.80MB 17.26%  encoding/json.Unmarshal
       3MB  0.41% 77.13%     9.51MB  1.30%  bytes.(*Buffer).grow
    2.50MB  0.34% 77.48%    19.52MB  2.68%  github.com/gocql/gocql.(*Conn).executeQuery
    2.50MB  0.34% 77.82%   130.80MB 17.95%  encoding/json.(*decodeState).object
       2MB  0.27% 78.10%    39.50MB  5.42%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).PutBatch
       2MB  0.27% 78.37%     5.51MB  0.76%  github.com/gocql/gocql.(*Conn).recv
       2MB  0.27% 78.64%       10MB  1.37%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).validate
       2MB  0.27% 78.92%       32MB  4.39%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do
       2MB  0.27% 79.19%    33.01MB  4.53%  github.com/alecthomas/participle/v2.(*capture).Parse
    1.50MB  0.21% 79.40%     6.50MB  0.89%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).ElementBuilder
    1.50MB  0.21% 79.61%    20.50MB  2.81%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Get
    1.50MB  0.21% 79.81%        4MB  0.55%  github.com/untillpro/ibusmem.(*bus).SendRequest2
       1MB  0.14% 79.95%        6MB  0.82%  net/http.(*conn).readRequest
       1MB  0.14% 80.09%    40.50MB  5.56%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ApplyBatch
       1MB  0.14% 80.22%    41.01MB  5.63%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).NewKeyBuilder
       1MB  0.14% 80.36%   111.29MB 15.27%  encoding/json.(*decodeState).arrayInterface
       1MB  0.14% 80.50%     7.01MB  0.96%  github.com/alecthomas/participle/v2.(*generatorContext).parseLiteral
       1MB  0.14% 80.63%    26.01MB  3.57%  github.com/golang-jwt/jwt.(*Parser).ParseWithClaims
       1MB  0.14% 80.77%    24.52MB  3.36%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).Put
       1MB  0.14% 80.91%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseSequence
       1MB  0.14% 81.05%    19.01MB  2.61%  github.com/alecthomas/participle/v2.(*generatorContext).parseModifier
    0.50MB 0.069% 81.12%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseType
    0.50MB 0.069% 81.18%    23.53MB  3.23%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).Update
    0.50MB 0.069% 81.25%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseDisjunction
    0.50MB 0.069% 81.32%        5MB  0.69%  net/http.readRequest
    0.50MB 0.069% 81.39%    33.01MB  4.53%  github.com/alecthomas/participle/v2.(*group).Parse
    0.50MB 0.069% 81.46%    32.50MB  4.46%  github.com/untillpro/airs-bp3/packages/air/dashboard.glob..func1
    0.50MB 0.069% 81.53%       20MB  2.75%  github.com/golang-jwt/jwt.(*Parser).ParseUnverified
    0.50MB 0.069% 81.60%    49.51MB  6.79%  github.com/voedger/voedger/pkg/iauthnzimpl.(*implIAuthenticator).Authenticate
    0.50MB 0.069% 81.66%    58.55MB  8.03%  github.com/alecthomas/participle/v2.(*structLexer).Peek
    0.50MB 0.069% 81.73%     5.07MB   0.7%  github.com/alecthomas/participle/v2.visit
    0.50MB 0.069% 81.80%        4MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutRecordID
    0.50MB 0.069% 81.87%        4MB  0.55%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity
    0.50MB 0.069% 81.94%    44.66MB  6.13%  github.com/voedger/voedger/pkg/router.createRequest
    0.50MB 0.069% 82.01%       15MB  2.06%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).Get
         0     0% 82.01%     9.01MB  1.24%  bytes.(*Buffer).Write
         0     0% 82.01%       10MB  1.37%  encoding/json.(*Decoder).Decode
         0     0% 82.01%    14.53MB  1.99%  encoding/json.(*decodeState).array
         0     0% 82.01%   131.80MB 18.09%  encoding/json.(*decodeState).unmarshal
         0     0% 82.01%   130.80MB 17.95%  encoding/json.(*decodeState).value
         0     0% 82.01%   111.29MB 15.27%  encoding/json.(*decodeState).valueInterface
         0     0% 82.01%        5MB  0.69%  github.com/VictoriaMetrics/fastcache.(*Cache).HasGet
         0     0% 82.01%    26.01MB  3.57%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseFromLexer
         0     0% 82.01%    34.92MB  4.79%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseString
         0     0% 82.01%    34.38MB  4.72%  github.com/alecthomas/participle/v2.(*Parser[...]).parse
         0     0% 82.01%    26.01MB  3.57%  github.com/alecthomas/participle/v2.(*Parser[...]).parseInto
         0     0% 82.01%    26.01MB  3.57%  github.com/alecthomas/participle/v2.(*Parser[...]).parseOne
         0     0% 82.01%    33.01MB  4.53%  github.com/alecthomas/participle/v2.(*disjunction).Parse
         0     0% 82.01%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseCapture
         0     0% 82.01%    27.52MB  3.78%  github.com/alecthomas/participle/v2.(*generatorContext).parseGroup
         0     0% 82.01%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseTerm
         0     0% 82.01%    82.57MB 11.33%  github.com/alecthomas/participle/v2.(*generatorContext).parseTermNoModifiers
         0     0% 82.01%    27.52MB  3.78%  github.com/alecthomas/participle/v2.(*generatorContext).subparseGroup
         0     0% 82.01%    33.01MB  4.53%  github.com/alecthomas/participle/v2.(*strct).Parse
         0     0% 82.01%    14.01MB  1.92%  github.com/alecthomas/participle/v2.(*structLexer).Next
         0     0% 82.01%    30.02MB  4.12%  github.com/alecthomas/participle/v2.Build[...]
         0     0% 82.01%    26.52MB  3.64%  github.com/alecthomas/participle/v2.MustBuild[...] (inline)
         0     0% 82.01%        6MB  0.82%  github.com/alecthomas/participle/v2.lexStruct
         0     0% 82.01%     4.57MB  0.63%  github.com/alecthomas/participle/v2.visit.func1
         0     0% 82.01%    25.52MB  3.50%  github.com/gocql/gocql.(*Batch).execute
         0     0% 82.01%     5.01MB  0.69%  github.com/gocql/gocql.(*Conn).serve
         0     0% 82.01%        4MB  0.55%  github.com/gocql/gocql.(*Iter).Scan
         0     0% 82.01%    21.02MB  2.88%  github.com/gocql/gocql.(*Query).Exec
         0     0% 82.01%    21.52MB  2.95%  github.com/gocql/gocql.(*Query).Iter
         0     0% 82.01%    19.02MB  2.61%  github.com/gocql/gocql.(*Query).execute
         0     0% 82.01%    30.02MB  4.12%  github.com/gocql/gocql.(*Session).ExecuteBatch
         0     0% 82.01%    30.02MB  4.12%  github.com/gocql/gocql.(*Session).executeBatch
         0     0% 82.01%    21.52MB  2.95%  github.com/gocql/gocql.(*Session).executeQuery
         0     0% 82.01%     4.52MB  0.62%  github.com/gocql/gocql.(*framer).writeBatchFrame
         0     0% 82.01%    10.02MB  1.37%  github.com/gocql/gocql.(*framer).writeExecuteFrame
         0     0% 82.01%     4.51MB  0.62%  github.com/gocql/gocql.(*framer).writeLong (inline)
         0     0% 82.01%    10.02MB  1.37%  github.com/gocql/gocql.(*framer).writeQueryParams
         0     0% 82.01%    49.04MB  6.73%  github.com/gocql/gocql.(*queryExecutor).attemptQuery
         0     0% 82.01%    49.04MB  6.73%  github.com/gocql/gocql.(*queryExecutor).do
         0     0% 82.01%    51.54MB  7.07%  github.com/gocql/gocql.(*queryExecutor).executeQuery
         0     0% 82.01%     4.50MB  0.62%  github.com/gocql/gocql.(*queryMetrics).attempt
         0     0% 82.01%     4.52MB  0.62%  github.com/gocql/gocql.(*writeBatchFrame).buildFrame
         0     0% 82.01%    10.02MB  1.37%  github.com/gocql/gocql.(*writeExecuteFrame).buildFrame
         0     0% 82.01%        4MB  0.55%  github.com/gocql/gocql.Unmarshal
         0     0% 82.01%        4MB  0.55%  github.com/gocql/gocql.scanColumn
         0     0% 82.01%    26.01MB  3.57%  github.com/golang-jwt/jwt.(*Parser).Parse (inline)
         0     0% 82.01%    26.01MB  3.57%  github.com/golang-jwt/jwt.Parse
         0     0% 82.01%    10.50MB  1.44%  github.com/google/flatbuffers/go.(*Builder).EndObject (inline)
         0     0% 82.01%    11.50MB  1.58%  github.com/google/flatbuffers/go.(*Builder).Finish (inline)
         0     0% 82.01%    33.50MB  4.60%  github.com/google/flatbuffers/go.(*Builder).Prep
         0     0% 82.01%        6MB  0.82%  github.com/google/flatbuffers/go.(*Builder).PrependInt64
         0     0% 82.01%     9.50MB  1.30%  github.com/google/flatbuffers/go.(*Builder).PrependVOffsetT
         0     0% 82.01%    10.50MB  1.44%  github.com/google/flatbuffers/go.(*Builder).WriteVtable
         0     0% 82.01%    11.50MB  1.58%  github.com/google/flatbuffers/go.(*Builder).finish
         0     0% 82.01%    60.82MB  8.35%  github.com/gorilla/mux.(*Router).ServeHTTP
         0     0% 82.01%    47.02MB  6.45%  github.com/untillpro/airs-bp3/airsbp3.buildVVM
         0     0% 82.01%    39.47MB  5.42%  github.com/untillpro/airs-bp3/apps/untill/airsbp.ProvideAirsBP.func1
         0     0% 82.01%     7.52MB  1.03%  github.com/untillpro/airs-bp3/packages/air.Provide
         0     0% 82.01%        4MB  0.55%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*articleService).isPromoArticle
         0     0% 82.01%     4.50MB  0.62%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do.func3
         0     0% 82.01%        4MB  0.55%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyOrders
         0     0% 82.01%        5MB  0.69%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyPayments
         0     0% 82.01%     4.50MB  0.62%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyWaiters
         0     0% 82.01%        6MB  0.82%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateHourlySales
         0     0% 82.01%    14.51MB  1.99%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdOrders
         0     0% 82.01%    16.02MB  2.20%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdPbill
         0     0% 82.01%     6.50MB  0.89%  github.com/untillpro/airs-bp3/packages/air/ordersdates.glob..func1
         0     0% 82.01%     5.50MB  0.75%  github.com/untillpro/airs-bp3/packages/air/pbilldates.glob..func1
         0     0% 82.01%       12MB  1.65%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3
         0     0% 82.01%       12MB  1.65%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.1
         0     0% 82.01%        5MB  0.69%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.2
         0     0% 82.01%       30MB  4.12%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4
         0     0% 82.01%       30MB  4.12%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.1
         0     0% 82.01%    17.50MB  2.40%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.2
         0     0% 82.01%    28.45MB  3.90%  github.com/untillpro/airs-bp3/packages/untill.Provide (inline)
         0     0% 82.01%    10.02MB  1.38%  github.com/untillpro/dynobuffers.(*Buffer).IterateFields
         0     0% 82.01%    26.55MB  3.64%  github.com/untillpro/dynobuffers.(*Buffer).Set (inline)
         0     0% 82.01%    36.50MB  5.01%  github.com/untillpro/dynobuffers.(*Buffer).ToBytes
         0     0% 82.01%    36.50MB  5.01%  github.com/untillpro/dynobuffers.(*Buffer).ToBytesNilled
         0     0% 82.01%    36.50MB  5.01%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer
         0     0% 82.01%    26.55MB  3.64%  github.com/untillpro/dynobuffers.(*Buffer).set
         0     0% 82.01%    86.02MB 11.80%  github.com/untillpro/dynobuffers.NewBuffer
         0     0% 82.01%       10MB  1.37%  github.com/untillpro/dynobuffers.encodeFixedSizeValue
         0     0% 82.01%    86.02MB 11.80%  github.com/untillpro/dynobuffers.getBuffer (inline)
         0     0% 82.01%     6.50MB  0.89%  github.com/voedger/voedger/pkg/appdef.(*fields).Fields
         0     0% 82.01%    57.50MB  7.89%  github.com/voedger/voedger/pkg/apps.Parse
         0     0% 82.01%        6MB  0.82%  github.com/voedger/voedger/pkg/apps/sys/blobber.Provide.func1
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/apps/sys/registry.Provide.func1
         0     0% 82.01%     5.50MB  0.75%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Get
         0     0% 82.01%    25.02MB  3.43%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Put
         0     0% 82.01%    41.52MB  5.70%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).PutBatch
         0     0% 82.01%    20.01MB  2.75%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutPlog
         0     0% 82.01%    15.51MB  2.13%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutWlog
         0     0% 82.01%    16.50MB  2.26%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply
         0     0% 82.01%    16.50MB  2.26%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply2
         0     0% 82.01%        6MB  0.82%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).GetSingleton
         0     0% 82.01%     5.50MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).getRecord
         0     0% 82.01%    15.50MB  2.13%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).putRecordsBatch
         0     0% 82.01%     5.02MB  0.69%  github.com/voedger/voedger/pkg/istructsmem.(*appStructsProviderType).AppStructs
         0     0% 82.01%    20.50MB  2.81%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).Get
         0     0% 82.01%    47.01MB  6.45%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).KeyBuilder
         0     0% 82.01%       18MB  2.47%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).NewValueBuilder
         0     0% 82.01%       13MB  1.78%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).storeViewRecord
         0     0% 82.01%    30.54MB  4.19%  github.com/voedger/voedger/pkg/istructsmem.(*commandFunction).Exec
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).build
         0     0% 82.01%    31.01MB  4.26%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).enumRecs
         0     0% 82.01%    13.50MB  1.85%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Build
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Elements
         0     0% 82.01%       13MB  1.78%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build
         0     0% 82.01%       13MB  1.78%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build.func1
         0     0% 82.01%       16MB  2.20%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).forEach
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).regenerateIDs
         0     0% 82.01%        7MB  0.96%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).BuildRawEvent
         0     0% 82.01%    31.01MB  4.26%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).CUDs
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).build
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).regenerateIDs
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).storeToBytes
         0     0% 82.01%    15.50MB  2.13%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals
         0     0% 82.01%    14.50MB  1.99%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).build
         0     0% 82.01%        6MB  0.82%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeToBytes
         0     0% 82.01%    23.53MB  3.23%  github.com/voedger/voedger/pkg/istructsmem.(*recordType).copyFrom (inline)
         0     0% 82.01%     5.01MB  0.69%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutFloat64
         0     0% 82.01%    11.52MB  1.58%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutNumber
         0     0% 82.01%    24.03MB  3.30%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom
         0     0% 82.01%    10.02MB  1.38%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom.func1
         0     0% 82.01%    13.50MB  1.85%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).loadFromBytes
         0     0% 82.01%     9.02MB  1.24%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).putValue
         0     0% 82.01%    86.02MB 11.80%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setDef
         0     0% 82.01%    72.52MB  9.95%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQName
         0     0% 82.01%    13.50MB  1.85%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQNameID
         0     0% 82.01%        8MB  1.10%  github.com/voedger/voedger/pkg/istructsmem.(*valueType).Build
         0     0% 82.01%    16.51MB  2.27%  github.com/voedger/voedger/pkg/istructsmem.FillElementFromJSON
         0     0% 82.01%    13.50MB  1.85%  github.com/voedger/voedger/pkg/istructsmem.loadRow
         0     0% 82.01%    23.03MB  3.16%  github.com/voedger/voedger/pkg/istructsmem.newUpdateRec
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.storeElement
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/istructsmem.storeEvent
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.storeEventArguments
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/istructsmem.storeRow
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/istructsmem/internal/utils.SafeWriteBuf
         0     0% 82.01%    32.01MB  4.39%  github.com/voedger/voedger/pkg/itokens-payloads.(*implIAppTokens).ValidateToken
         0     0% 82.01%    32.01MB  4.39%  github.com/voedger/voedger/pkg/itokensjwt.(*JWTSigner).ValidateToken
         0     0% 82.01%       10MB  1.37%  github.com/voedger/voedger/pkg/parser.(*SchemaAST).Iterate
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/parser.(*analyseCtx).table
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/parser.(*buildContext).addFieldRefToDef
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/parser.(*buildContext).addTableItems
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/parser.(*buildContext).fillTable
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/parser.(*buildContext).table
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/parser.MergePackageSchemas (inline)
         0     0% 82.01%    58.96MB  8.09%  github.com/voedger/voedger/pkg/parser.ParseFile
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/parser.analyse
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/parser.analyse.func1
         0     0% 82.01%       10MB  1.37%  github.com/voedger/voedger/pkg/parser.iterate.func1
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/parser.mergePackageSchemasImpl
         0     0% 82.01%    61.96MB  8.50%  github.com/voedger/voedger/pkg/parser.parseImpl
         0     0% 82.01%     7.50MB  1.03%  github.com/voedger/voedger/pkg/parser.resolveTable
         0     0% 82.01%    65.51MB  8.99%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doAsync
         0     0% 82.01%   444.93MB 61.06%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doSync
         0     0% 82.01%   438.43MB 60.17%  github.com/voedger/voedger/pkg/pipeline.(*implISyncOperatorSimple).DoSync
         0     0% 82.01%     6.50MB  0.89%  github.com/voedger/voedger/pkg/pipeline.(*serviceOperator).DoSync.func1
         0     0% 82.01%    16.50MB  2.26%  github.com/voedger/voedger/pkg/pipeline.p_flush
         0     0% 82.01%    83.01MB 11.39%  github.com/voedger/voedger/pkg/pipeline.puller_async
         0     0% 82.01%   441.93MB 60.65%  github.com/voedger/voedger/pkg/pipeline.puller_sync
         0     0% 82.01%    39.01MB  5.35%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).authenticate
         0     0% 82.01%    20.01MB  2.75%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).putPLog
         0     0% 82.01%     4.01MB  0.55%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).writeCUDs
         0     0% 82.01%       16MB  2.20%  github.com/voedger/voedger/pkg/processors/command.applyPLogEvent
         0     0% 82.01%        7MB  0.96%  github.com/voedger/voedger/pkg/processors/command.buildRawEvent
         0     0% 82.01%    30.54MB  4.19%  github.com/voedger/voedger/pkg/processors/command.execCommand
         0     0% 82.01%    29.51MB  4.05%  github.com/voedger/voedger/pkg/processors/command.getArgsObject
         0     0% 82.01%    15.51MB  2.13%  github.com/voedger/voedger/pkg/processors/command.putWLog
         0     0% 82.01%   117.80MB 16.17%  github.com/voedger/voedger/pkg/processors/command.unmarshalRequestBody
         0     0% 82.01%    10.50MB  1.44%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func3
         0     0% 82.01%    21.51MB  2.95%  github.com/voedger/voedger/pkg/processors/query.operator.func1
         0     0% 82.01%    64.01MB  8.78%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).DoAsync
         0     0% 82.01%    16.50MB  2.26%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).Flush
         0     0% 82.01%    16.50MB  2.26%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).flush
         0     0% 82.01%        5MB  0.69%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).savePosition
         0     0% 82.01%    44.51MB  6.11%  github.com/voedger/voedger/pkg/projectors.newSyncBranch.func1
         0     0% 82.01%    29.50MB  4.05%  github.com/voedger/voedger/pkg/projectors.syncActualizerFactory.func3
         0     0% 82.01%    55.16MB  7.57%  github.com/voedger/voedger/pkg/router.corsHandler.func1
         0     0% 82.01%    53.16MB  7.30%  github.com/voedger/voedger/pkg/router.requestHandler.func1
         0     0% 82.01%     8.50MB  1.17%  github.com/voedger/voedger/pkg/state.(*bundleImpl).get
         0     0% 82.01%        7MB  0.96%  github.com/voedger/voedger/pkg/state.(*bundleImpl).put
         0     0% 82.01%        7MB  0.96%  github.com/voedger/voedger/pkg/state.(*bundledHostState).ApplyIntents
         0     0% 82.01%       22MB  3.02%  github.com/voedger/voedger/pkg/state.(*bundledHostState).CanExist
         0     0% 82.01%    11.50MB  1.58%  github.com/voedger/voedger/pkg/state.(*bundledHostState).FlushBundles
         0     0% 82.01%    29.50MB  4.05%  github.com/voedger/voedger/pkg/state.(*hostState).ApplyIntents
         0     0% 82.01%    23.50MB  3.23%  github.com/voedger/voedger/pkg/state.(*hostState).CanExist
         0     0% 82.01%    41.51MB  5.70%  github.com/voedger/voedger/pkg/state.(*hostState).KeyBuilder
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/state.(*hostState).MustExist
         0     0% 82.01%       22MB  3.02%  github.com/voedger/voedger/pkg/state.(*hostState).NewValue
         0     0% 82.01%    23.53MB  3.23%  github.com/voedger/voedger/pkg/state.(*hostState).UpdateValue
         0     0% 82.01%     8.50MB  1.17%  github.com/voedger/voedger/pkg/state.(*recordsStorage).Get
         0     0% 82.01%    23.53MB  3.23%  github.com/voedger/voedger/pkg/state.(*recordsStorage).ProvideValueBuilderForUpdate
         0     0% 82.01%     5.01MB  0.69%  github.com/voedger/voedger/pkg/state.(*recordsValueBuilder).PutFloat64
         0     0% 82.01%    15.50MB  2.13%  github.com/voedger/voedger/pkg/state.(*viewRecordsKeyBuilder).Equals
         0     0% 82.01%        8MB  1.10%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).Build (inline)
         0     0% 82.01%        8MB  1.10%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).BuildValue
         0     0% 82.01%    20.53MB  2.82%  github.com/voedger/voedger/pkg/sys.Provide
         0     0% 82.01%     4.50MB  0.62%  github.com/voedger/voedger/pkg/sys/authnz/workspace.Provide
         0     0% 82.01%     4.52MB  0.62%  github.com/voedger/voedger/pkg/sys/blobber.ProvideBlobberCmds
         0     0% 82.01%       11MB  1.51%  github.com/voedger/voedger/pkg/sys/journal.glob..func1
         0     0% 82.01%    57.02MB  7.83%  github.com/voedger/voedger/pkg/vvm.ProvideCluster
         0     0% 82.01%    49.02MB  6.73%  github.com/voedger/voedger/pkg/vvm.ProvideVVM
         0     0% 82.01%       53MB  7.27%  github.com/voedger/voedger/pkg/vvm.VVMAppsBuilder.Build
         0     0% 82.01%        8MB  1.10%  github.com/voedger/voedger/pkg/vvm.buildSchemasASTs
         0     0% 82.01%    10.50MB  1.44%  github.com/voedger/voedger/pkg/vvm.provideSubjectGetterFunc.func1
         0     0% 82.01%       51MB  7.00%  github.com/voedger/voedger/pkg/vvm.provideVVMApps (inline)
         0     0% 82.01%    67.32MB  9.24%  net/http.(*conn).serve
         0     0% 82.01%    56.32MB  7.73%  net/http.HandlerFunc.ServeHTTP
         0     0% 82.01%    60.82MB  8.35%  net/http.serverHandler.ServeHTTP
         0     0% 82.01%     7.50MB  1.03%  reflect.Value.SetMapIndex
         0     0% 82.01%    88.52MB 12.15%  sync.(*Pool).Get
