File: airs-bp
Type: alloc_space
Time: Aug 26, 2023 at 7:24pm (UTC)
Showing nodes accounting for 559.05MB, 84.25% of 663.54MB total
Dropped 356 nodes (cum <= 3.32MB)
      flat  flat%   sum%        cum   cum%
  116.82MB 17.61% 17.61%   132.82MB 20.02%  encoding/json.(*decodeState).objectInterface
   63.02MB  9.50% 27.10%    89.02MB 13.42%  github.com/untillpro/dynobuffers.glob..func1
   54.19MB  8.17% 35.27%    54.19MB  8.17%  io.ReadAll
   31.51MB  4.75% 40.02%    31.51MB  4.75%  github.com/google/flatbuffers/go.(*Builder).growByteBuffer (inline)
   30.56MB  4.61% 44.62%    30.56MB  4.61%  github.com/untillpro/dynobuffers.(*Buffer).prepareModifiedFields (inline)
      26MB  3.92% 48.54%       26MB  3.92%  github.com/google/flatbuffers/go.NewBuilder (inline)
      13MB  1.96% 50.50%       14MB  2.11%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals.func1
      13MB  1.96% 52.46%       13MB  1.96%  encoding/json.unquote (inline)
   11.54MB  1.74% 54.20%    11.54MB  1.74%  github.com/gocql/gocql.(*framer).writeBytes (inline)
      10MB  1.51% 55.71%    46.51MB  7.01%  github.com/voedger/voedger/pkg/istructsmem.newKey
      10MB  1.51% 57.21%    47.01MB  7.08%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).build
    9.50MB  1.43% 58.65%     9.50MB  1.43%  github.com/gocql/gocql.newFramer (inline)
    9.50MB  1.43% 60.08%    41.56MB  6.26%  github.com/gocql/gocql.(*Conn).exec
    8.50MB  1.28% 61.36%     8.50MB  1.28%  github.com/VictoriaMetrics/fastcache.(*bucket).Get
    8.27MB  1.25% 62.61%     8.78MB  1.32%  github.com/alecthomas/participle/v2/lexer.Upgrade
    7.51MB  1.13% 63.74%    30.55MB  4.60%  github.com/gocql/gocql.(*Conn).executeBatch
       7MB  1.06% 64.79%        7MB  1.06%  github.com/alecthomas/participle/v2.(*parseContext).Defer (inline)
       7MB  1.06% 65.85%        7MB  1.06%  github.com/voedger/voedger/pkg/pipeline.forkOperator.DoSync
       6MB   0.9% 66.75%        6MB   0.9%  bytes.growSlice
       6MB   0.9% 67.66%        6MB   0.9%  github.com/alecthomas/participle/v2.(*parseContext).Branch (inline)
    5.50MB  0.83% 68.49%     5.50MB  0.83%  reflect.mapassign_faststr
    5.50MB  0.83% 69.31%     5.50MB  0.83%  net/textproto.(*Reader).ReadMIMEHeader
    5.50MB  0.83% 70.14%     5.50MB  0.83%  github.com/gocql/gocql.(*queryMetrics).hostMetricsLocked
    5.50MB  0.83% 70.97%     5.50MB  0.83%  github.com/google/flatbuffers/go.(*Builder).StartObject (inline)
    5.50MB  0.83% 71.80%     5.50MB  0.83%  time.NewTimer
       5MB  0.75% 72.56%        5MB  0.75%  encoding/base64.(*Encoding).DecodeString
       5MB  0.75% 73.31%    25.01MB  3.77%  github.com/voedger/voedger/pkg/istructsmem.newValue
       5MB  0.75% 74.06%        5MB  0.75%  github.com/gocql/gocql.(*writeCoalescer).writeContext
    4.50MB  0.68% 74.74%    32.01MB  4.82%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Get
       4MB   0.6% 75.34%        4MB   0.6%  strings.(*Builder).grow (inline)
    3.51MB  0.53% 75.87%     3.51MB  0.53%  github.com/gocql/gocql.appendLong (inline)
    3.50MB  0.53% 76.40%     3.50MB  0.53%  encoding/json.(*Decoder).refill
    3.50MB  0.53% 76.93%   139.82MB 21.07%  encoding/json.Unmarshal
       3MB  0.45% 77.38%    26.03MB  3.92%  github.com/gocql/gocql.(*Conn).executeQuery
       3MB  0.45% 77.83%    23.50MB  3.54%  github.com/alecthomas/participle/v2.(*sequence).Parse
       3MB  0.45% 78.28%    39.51MB  5.95%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).NewKeyBuilder
       3MB  0.45% 78.74%     3.50MB  0.53%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeViewPartKey
    2.50MB  0.38% 79.11%        4MB   0.6%  github.com/golang-jwt/jwt.(*SigningMethodHMAC).Verify
    2.50MB  0.38% 79.49%     4.50MB  0.68%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).readPlogToTheEnd2
       2MB   0.3% 79.79%    42.50MB  6.41%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).PutBatch
       2MB   0.3% 80.09%     7.01MB  1.06%  github.com/gocql/gocql.(*Conn).recv
       2MB   0.3% 80.39%   142.32MB 21.45%  encoding/json.(*decodeState).object
       2MB   0.3% 80.70%    42.55MB  6.41%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).PutBatch
    1.50MB  0.23% 80.92%    23.50MB  3.54%  github.com/alecthomas/participle/v2.(*group).Parse
    1.50MB  0.23% 81.15%        9MB  1.36%  net/http.(*conn).readRequest
    1.50MB  0.23% 81.37%    44.01MB  6.63%  github.com/voedger/voedger/pkg/iauthnzimpl.(*implIAuthenticator).Authenticate
    1.50MB  0.23% 81.60%       44MB  6.63%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ApplyBatch
    1.50MB  0.23% 81.83%        7MB  1.06%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.ProvideTableBusinessValidator.func1
    1.50MB  0.23% 82.05%       14MB  2.11%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).validate
    1.50MB  0.23% 82.28%    23.50MB  3.54%  github.com/alecthomas/participle/v2.(*capture).Parse
    1.06MB  0.16% 82.44%     4.07MB  0.61%  github.com/VictoriaMetrics/fastcache.New
       1MB  0.15% 82.59%    62.69MB  9.45%  github.com/voedger/voedger/pkg/router.requestHandler.func1
       1MB  0.15% 82.74%    32.51MB  4.90%  github.com/untillpro/airs-bp3/packages/air/dashboard.glob..func1
       1MB  0.15% 82.89%        7MB  1.06%  bytes.(*Buffer).grow
       1MB  0.15% 83.04%    13.50MB  2.03%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).ProvideValueBuilder
       1MB  0.15% 83.19%     3.50MB  0.53%  github.com/untillpro/ibusmem.(*bus).SendRequest2
       1MB  0.15% 83.34%        9MB  1.36%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).BuildValue
    0.54MB 0.082% 83.42%    23.83MB  3.59%  github.com/untillpro/airs-bp3/packages/untill.Provide
    0.50MB 0.075% 83.50%        7MB  1.06%  net/http.readRequest
    0.50MB 0.075% 83.58%        7MB  1.06%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).ElementBuilder
    0.50MB 0.075% 83.65%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseCapture
    0.50MB 0.075% 83.73%     3.50MB  0.53%  github.com/voedger/voedger/pkg/istructsmem.CheckRefIntegrity
    0.50MB 0.075% 83.80%   126.32MB 19.04%  encoding/json.(*decodeState).arrayInterface
    0.50MB 0.075% 83.88%    68.35MB 10.30%  github.com/gorilla/mux.(*Router).ServeHTTP
    0.50MB 0.075% 83.95%    31.51MB  4.75%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do
    0.50MB 0.075% 84.03%    24.50MB  3.69%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4
    0.50MB 0.075% 84.10%    23.50MB  3.54%  github.com/alecthomas/participle/v2.(*strct).Parse
    0.50MB 0.075% 84.18%       15MB  2.26%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).Get
    0.50MB 0.075% 84.25%    77.85MB 11.73%  net/http.(*conn).serve
         0     0% 84.25%        6MB   0.9%  bytes.(*Buffer).Write
         0     0% 84.25%    10.50MB  1.58%  encoding/json.(*Decoder).Decode
         0     0% 84.25%     3.50MB  0.53%  encoding/json.(*Decoder).readValue
         0     0% 84.25%    15.04MB  2.27%  encoding/json.(*decodeState).array
         0     0% 84.25%   142.82MB 21.52%  encoding/json.(*decodeState).unmarshal
         0     0% 84.25%   142.82MB 21.52%  encoding/json.(*decodeState).value
         0     0% 84.25%   126.32MB 19.04%  encoding/json.(*decodeState).valueInterface
         0     0% 84.25%     8.50MB  1.28%  github.com/VictoriaMetrics/fastcache.(*Cache).HasGet
         0     0% 84.25%       20MB  3.01%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseFromLexer
         0     0% 84.25%    24.28MB  3.66%  github.com/alecthomas/participle/v2.(*Parser[...]).ParseString
         0     0% 84.25%    25.28MB  3.81%  github.com/alecthomas/participle/v2.(*Parser[...]).parse
         0     0% 84.25%    20.50MB  3.09%  github.com/alecthomas/participle/v2.(*Parser[...]).parseInto
         0     0% 84.25%       20MB  3.01%  github.com/alecthomas/participle/v2.(*Parser[...]).parseOne
         0     0% 84.25%    23.50MB  3.54%  github.com/alecthomas/participle/v2.(*disjunction).Parse
         0     0% 84.25%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseDisjunction
         0     0% 84.25%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseSequence
         0     0% 84.25%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseTerm
         0     0% 84.25%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseTermNoModifiers
         0     0% 84.25%     6.50MB  0.98%  github.com/alecthomas/participle/v2.(*generatorContext).parseType
         0     0% 84.25%     3.50MB  0.53%  github.com/gocql/gocql.(*Batch).attempt
         0     0% 84.25%    30.55MB  4.60%  github.com/gocql/gocql.(*Batch).execute
         0     0% 84.25%     7.01MB  1.06%  github.com/gocql/gocql.(*Conn).serve
         0     0% 84.25%    28.53MB  4.30%  github.com/gocql/gocql.(*Query).Exec
         0     0% 84.25%    29.03MB  4.37%  github.com/gocql/gocql.(*Query).Iter
         0     0% 84.25%    26.03MB  3.92%  github.com/gocql/gocql.(*Query).execute
         0     0% 84.25%    36.05MB  5.43%  github.com/gocql/gocql.(*Session).ExecuteBatch
         0     0% 84.25%    36.05MB  5.43%  github.com/gocql/gocql.(*Session).executeBatch
         0     0% 84.25%    29.03MB  4.37%  github.com/gocql/gocql.(*Session).executeQuery
         0     0% 84.25%     3.54MB  0.53%  github.com/gocql/gocql.(*framer).writeBatchFrame
         0     0% 84.25%    12.52MB  1.89%  github.com/gocql/gocql.(*framer).writeExecuteFrame
         0     0% 84.25%     3.51MB  0.53%  github.com/gocql/gocql.(*framer).writeLong (inline)
         0     0% 84.25%    12.52MB  1.89%  github.com/gocql/gocql.(*framer).writeQueryParams
         0     0% 84.25%    62.07MB  9.35%  github.com/gocql/gocql.(*queryExecutor).attemptQuery
         0     0% 84.25%    62.07MB  9.35%  github.com/gocql/gocql.(*queryExecutor).do
         0     0% 84.25%    65.07MB  9.81%  github.com/gocql/gocql.(*queryExecutor).executeQuery
         0     0% 84.25%     5.50MB  0.83%  github.com/gocql/gocql.(*queryMetrics).attempt
         0     0% 84.25%     3.54MB  0.53%  github.com/gocql/gocql.(*writeBatchFrame).buildFrame
         0     0% 84.25%    12.52MB  1.89%  github.com/gocql/gocql.(*writeExecuteFrame).buildFrame
         0     0% 84.25%    21.51MB  3.24%  github.com/golang-jwt/jwt.(*Parser).Parse (inline)
         0     0% 84.25%    14.50MB  2.19%  github.com/golang-jwt/jwt.(*Parser).ParseUnverified
         0     0% 84.25%    21.51MB  3.24%  github.com/golang-jwt/jwt.(*Parser).ParseWithClaims
         0     0% 84.25%    21.51MB  3.24%  github.com/golang-jwt/jwt.Parse
         0     0% 84.25%    13.50MB  2.04%  github.com/google/flatbuffers/go.(*Builder).EndObject (inline)
         0     0% 84.25%     6.50MB  0.98%  github.com/google/flatbuffers/go.(*Builder).Finish (inline)
         0     0% 84.25%    31.51MB  4.75%  github.com/google/flatbuffers/go.(*Builder).Prep
         0     0% 84.25%       10MB  1.51%  github.com/google/flatbuffers/go.(*Builder).PrependInt64
         0     0% 84.25%    13.50MB  2.04%  github.com/google/flatbuffers/go.(*Builder).PrependVOffsetT
         0     0% 84.25%    13.50MB  2.04%  github.com/google/flatbuffers/go.(*Builder).WriteVtable
         0     0% 84.25%     6.50MB  0.98%  github.com/google/flatbuffers/go.(*Builder).finish
         0     0% 84.25%    24.96MB  3.76%  github.com/untillpro/airs-bp3/airsbp3.buildVVM
         0     0% 84.25%    24.83MB  3.74%  github.com/untillpro/airs-bp3/apps/untill/airsbp.ProvideAirsBP.func1
         0     0% 84.25%     6.50MB  0.98%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*articleService).isPromoArticle
         0     0% 84.25%     6.50MB  0.98%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).do.func3
         0     0% 84.25%     5.50MB  0.83%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyOrders
         0     0% 84.25%     3.50MB  0.53%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyPayments
         0     0% 84.25%        6MB   0.9%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateDailyWaiters
         0     0% 84.25%        5MB  0.75%  github.com/untillpro/airs-bp3/packages/air/dashboard.(*dashboardProjectorLogic).updateHourlySales
         0     0% 84.25%    16.52MB  2.49%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdOrders
         0     0% 84.25%    17.52MB  2.64%  github.com/untillpro/airs-bp3/packages/air/edit.execCmdPbill
         0     0% 84.25%     4.50MB  0.68%  github.com/untillpro/airs-bp3/packages/air/ordersdates.glob..func1
         0     0% 84.25%        4MB   0.6%  github.com/untillpro/airs-bp3/packages/air/pbilldates.glob..func1
         0     0% 84.25%     5.50MB  0.83%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.ProvideTableBusinessValidator.func1.1
         0     0% 84.25%     8.50MB  1.28%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3
         0     0% 84.25%     8.50MB  1.28%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.1
         0     0% 84.25%        4MB   0.6%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func3.2
         0     0% 84.25%       24MB  3.62%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.1
         0     0% 84.25%    14.50MB  2.19%  github.com/untillpro/airs-bp3/packages/air/tablesoverview.glob..func4.2
         0     0% 84.25%    12.03MB  1.81%  github.com/untillpro/dynobuffers.(*Buffer).IterateFields
         0     0% 84.25%    30.56MB  4.61%  github.com/untillpro/dynobuffers.(*Buffer).Set (inline)
         0     0% 84.25%    37.01MB  5.58%  github.com/untillpro/dynobuffers.(*Buffer).ToBytes
         0     0% 84.25%    37.01MB  5.58%  github.com/untillpro/dynobuffers.(*Buffer).ToBytesNilled
         0     0% 84.25%    37.01MB  5.58%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer
         0     0% 84.25%     5.50MB  0.83%  github.com/untillpro/dynobuffers.(*Buffer).encodeBuffer.func1
         0     0% 84.25%    30.56MB  4.61%  github.com/untillpro/dynobuffers.(*Buffer).set
         0     0% 84.25%    89.02MB 13.42%  github.com/untillpro/dynobuffers.NewBuffer
         0     0% 84.25%    15.50MB  2.34%  github.com/untillpro/dynobuffers.encodeFixedSizeValue
         0     0% 84.25%    89.02MB 13.42%  github.com/untillpro/dynobuffers.getBuffer (inline)
         0     0% 84.25%        7MB  1.06%  github.com/voedger/voedger/pkg/appdef.(*fields).Fields
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/in10nmem.(*N10nBroker).WatchChannel
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Get
         0     0% 84.25%    29.52MB  4.45%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).Put
         0     0% 84.25%    43.05MB  6.49%  github.com/voedger/voedger/pkg/istoragecache.(*cachedAppStorage).PutBatch
         0     0% 84.25%     7.07MB  1.07%  github.com/voedger/voedger/pkg/istoragecache.(*implCachingAppStorageProvider).AppStorage
         0     0% 84.25%     4.07MB  0.61%  github.com/voedger/voedger/pkg/istoragecache.newCachingAppStorage
         0     0% 84.25%    29.52MB  4.45%  github.com/voedger/voedger/pkg/istorageimpl/istoragecas.(*appStorageType).Put
         0     0% 84.25%     3.55MB  0.53%  github.com/voedger/voedger/pkg/istructsmem.(*AppConfigType).prepare
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).GetNewRawEventBuilder
         0     0% 84.25%    22.20MB  3.35%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutPlog
         0     0% 84.25%    17.01MB  2.56%  github.com/voedger/voedger/pkg/istructsmem.(*appEventsType).PutWlog
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).Apply2
         0     0% 84.25%       10MB  1.51%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).GetSingleton
         0     0% 84.25%     9.50MB  1.43%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).getRecord
         0     0% 84.25%     8.50MB  1.28%  github.com/voedger/voedger/pkg/istructsmem.(*appRecordsType).putRecordsBatch
         0     0% 84.25%    10.12MB  1.53%  github.com/voedger/voedger/pkg/istructsmem.(*appStructsProviderType).AppStructs
         0     0% 84.25%    46.51MB  7.01%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).KeyBuilder
         0     0% 84.25%    12.50MB  1.88%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).NewValueBuilder
         0     0% 84.25%     8.50MB  1.28%  github.com/voedger/voedger/pkg/istructsmem.(*appViewRecords).storeViewRecord
         0     0% 84.25%    34.04MB  5.13%  github.com/voedger/voedger/pkg/istructsmem.(*commandFunction).Exec
         0     0% 84.25%    26.03MB  3.92%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).Update
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).build
         0     0% 84.25%    29.01MB  4.37%  github.com/voedger/voedger/pkg/istructsmem.(*cudType).enumRecs
         0     0% 84.25%    18.50MB  2.79%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Build
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).Elements
         0     0% 84.25%       19MB  2.86%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build
         0     0% 84.25%       19MB  2.86%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).build.func1
         0     0% 84.25%    19.50MB  2.94%  github.com/voedger/voedger/pkg/istructsmem.(*elementType).forEach
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).BuildRawEvent
         0     0% 84.25%    29.01MB  4.37%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).CUDs
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).build
         0     0% 84.25%     5.50MB  0.83%  github.com/voedger/voedger/pkg/istructsmem.(*eventType).storeToBytes
         0     0% 84.25%       16MB  2.41%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).Equals
         0     0% 84.25%        8MB  1.21%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).build
         0     0% 84.25%     5.50MB  0.83%  github.com/voedger/voedger/pkg/istructsmem.(*keyType).storeToBytes
         0     0% 84.25%        7MB  1.06%  github.com/voedger/voedger/pkg/istructsmem.(*queryFunction).Exec
         0     0% 84.25%    27.03MB  4.07%  github.com/voedger/voedger/pkg/istructsmem.(*recordType).copyFrom (inline)
         0     0% 84.25%     5.51MB  0.83%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutFloat64
         0     0% 84.25%    13.52MB  2.04%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutNumber
         0     0% 84.25%     3.50MB  0.53%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).PutRecordID
         0     0% 84.25%    28.03MB  4.22%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom
         0     0% 84.25%    11.53MB  1.74%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).copyFrom.func1
         0     0% 84.25%       18MB  2.71%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).loadFromBytes
         0     0% 84.25%     9.02MB  1.36%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).putValue
         0     0% 84.25%    89.02MB 13.42%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setDef
         0     0% 84.25%    71.02MB 10.70%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQName
         0     0% 84.25%       18MB  2.71%  github.com/voedger/voedger/pkg/istructsmem.(*rowType).setQNameID
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/istructsmem.(*updateRecType).build
         0     0% 84.25%        8MB  1.21%  github.com/voedger/voedger/pkg/istructsmem.(*valueType).Build
         0     0% 84.25%    18.02MB  2.72%  github.com/voedger/voedger/pkg/istructsmem.FillElementFromJSON
         0     0% 84.25%       18MB  2.71%  github.com/voedger/voedger/pkg/istructsmem.loadRow
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/istructsmem.newEventBuilder (inline)
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/istructsmem.newRawEventBuilder
         0     0% 84.25%    26.03MB  3.92%  github.com/voedger/voedger/pkg/istructsmem.newUpdateRec
         0     0% 84.25%        4MB   0.6%  github.com/voedger/voedger/pkg/istructsmem.storeElement
         0     0% 84.25%        5MB  0.75%  github.com/voedger/voedger/pkg/istructsmem.storeEvent
         0     0% 84.25%        4MB   0.6%  github.com/voedger/voedger/pkg/istructsmem.storeEventArguments
         0     0% 84.25%     3.50MB  0.53%  github.com/voedger/voedger/pkg/istructsmem/internal/utils.SafeWriteBuf
         0     0% 84.25%    28.51MB  4.30%  github.com/voedger/voedger/pkg/itokens-payloads.(*implIAppTokens).ValidateToken
         0     0% 84.25%    28.51MB  4.30%  github.com/voedger/voedger/pkg/itokensjwt.(*JWTSigner).ValidateToken
         0     0% 84.25%    24.80MB  3.74%  github.com/voedger/voedger/pkg/parser.ParseFile
         0     0% 84.25%    25.30MB  3.81%  github.com/voedger/voedger/pkg/parser.parseImpl
         0     0% 84.25%    63.01MB  9.50%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doAsync
         0     0% 84.25%   456.60MB 68.81%  github.com/voedger/voedger/pkg/pipeline.(*WiredOperator).doSync
         0     0% 84.25%   448.10MB 67.53%  github.com/voedger/voedger/pkg/pipeline.(*implISyncOperatorSimple).DoSync
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/pipeline.(*serviceOperator).DoSync.func1
         0     0% 84.25%       12MB  1.81%  github.com/voedger/voedger/pkg/pipeline.p_flush
         0     0% 84.25%    75.51MB 11.38%  github.com/voedger/voedger/pkg/pipeline.puller_async
         0     0% 84.25%   456.60MB 68.81%  github.com/voedger/voedger/pkg/pipeline.puller_sync
         0     0% 84.25%    38.01MB  5.73%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).authenticate
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).getRawEventBuilder
         0     0% 84.25%    21.20MB  3.19%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).putPLog
         0     0% 84.25%     4.01MB   0.6%  github.com/voedger/voedger/pkg/processors/command.(*cmdProc).writeCUDs
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/processors/command.applyPLogEvent
         0     0% 84.25%        9MB  1.36%  github.com/voedger/voedger/pkg/processors/command.buildRawEvent
         0     0% 84.25%    34.04MB  5.13%  github.com/voedger/voedger/pkg/processors/command.execCommand
         0     0% 84.25%    36.02MB  5.43%  github.com/voedger/voedger/pkg/processors/command.getArgsObject
         0     0% 84.25%        4MB   0.6%  github.com/voedger/voedger/pkg/processors/command.getWSDesc
         0     0% 84.25%    17.01MB  2.56%  github.com/voedger/voedger/pkg/processors/command.putWLog
         0     0% 84.25%   132.32MB 19.94%  github.com/voedger/voedger/pkg/processors/command.unmarshalRequestBody
         0     0% 84.25%        7MB  1.06%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func14
         0     0% 84.25%        6MB   0.9%  github.com/voedger/voedger/pkg/processors/query.newQueryProcessorPipeline.func3
         0     0% 84.25%    25.51MB  3.84%  github.com/voedger/voedger/pkg/processors/query.operator.func1
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).Run
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).keepReading
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/projectors.(*asyncActualizer).keepReading.func1
         0     0% 84.25%    63.01MB  9.50%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).DoAsync
         0     0% 84.25%       12MB  1.81%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).Flush
         0     0% 84.25%       12MB  1.81%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).flush
         0     0% 84.25%        5MB  0.75%  github.com/voedger/voedger/pkg/projectors.(*asyncProjector).savePosition
         0     0% 84.25%    34.51MB  5.20%  github.com/voedger/voedger/pkg/projectors.newSyncBranch.func1
         0     0% 84.25%       38MB  5.73%  github.com/voedger/voedger/pkg/projectors.syncActualizerFactory.func3
         0     0% 84.25%    64.19MB  9.67%  github.com/voedger/voedger/pkg/router.corsHandler.func1
         0     0% 84.25%    54.69MB  8.24%  github.com/voedger/voedger/pkg/router.createRequest
         0     0% 84.25%     9.50MB  1.43%  github.com/voedger/voedger/pkg/state.(*bundleImpl).get
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/state.(*bundleImpl).put
         0     0% 84.25%     6.50MB  0.98%  github.com/voedger/voedger/pkg/state.(*bundledHostState).ApplyIntents
         0     0% 84.25%    29.50MB  4.45%  github.com/voedger/voedger/pkg/state.(*bundledHostState).CanExist
         0     0% 84.25%        7MB  1.06%  github.com/voedger/voedger/pkg/state.(*bundledHostState).FlushBundles
         0     0% 84.25%       38MB  5.73%  github.com/voedger/voedger/pkg/state.(*hostState).ApplyIntents
         0     0% 84.25%    25.50MB  3.84%  github.com/voedger/voedger/pkg/state.(*hostState).CanExist
         0     0% 84.25%    41.01MB  6.18%  github.com/voedger/voedger/pkg/state.(*hostState).KeyBuilder
         0     0% 84.25%     7.50MB  1.13%  github.com/voedger/voedger/pkg/state.(*hostState).MustExist
         0     0% 84.25%    13.50MB  2.03%  github.com/voedger/voedger/pkg/state.(*hostState).NewValue
         0     0% 84.25%    26.03MB  3.92%  github.com/voedger/voedger/pkg/state.(*hostState).UpdateValue
         0     0% 84.25%       14MB  2.11%  github.com/voedger/voedger/pkg/state.(*recordsStorage).Get
         0     0% 84.25%    26.03MB  3.92%  github.com/voedger/voedger/pkg/state.(*recordsStorage).ProvideValueBuilderForUpdate
         0     0% 84.25%     5.51MB  0.83%  github.com/voedger/voedger/pkg/state.(*recordsValueBuilder).PutFloat64
         0     0% 84.25%       16MB  2.41%  github.com/voedger/voedger/pkg/state.(*viewRecordsKeyBuilder).Equals
         0     0% 84.25%    11.50MB  1.73%  github.com/voedger/voedger/pkg/state.(*viewRecordsStorage).Get
         0     0% 84.25%        8MB  1.21%  github.com/voedger/voedger/pkg/state.(*viewRecordsValueBuilder).Build (inline)
         0     0% 84.25%     4.50MB  0.68%  github.com/voedger/voedger/pkg/sys/authnz/workspace.qcwbnQryExec
         0     0% 84.25%    13.50MB  2.03%  github.com/voedger/voedger/pkg/sys/journal.glob..func1
         0     0% 84.25%    30.46MB  4.59%  github.com/voedger/voedger/pkg/vvm.ProvideCluster
         0     0% 84.25%    26.96MB  4.06%  github.com/voedger/voedger/pkg/vvm.ProvideVVM
         0     0% 84.25%    25.34MB  3.82%  github.com/voedger/voedger/pkg/vvm.VVMAppsBuilder.Build
         0     0% 84.25%     6.08MB  0.92%  github.com/voedger/voedger/pkg/vvm.provideAppsWSAmounts
         0     0% 84.25%     4.04MB  0.61%  github.com/voedger/voedger/pkg/vvm.provideBlobberAppStruct (inline)
         0     0% 84.25%       10MB  1.51%  github.com/voedger/voedger/pkg/vvm.provideSubjectGetterFunc.func1
         0     0% 84.25%    19.84MB  2.99%  github.com/voedger/voedger/pkg/vvm.provideVVMApps (inline)
         0     0% 84.25%    65.35MB  9.85%  net/http.HandlerFunc.ServeHTTP
         0     0% 84.25%    68.35MB 10.30%  net/http.serverHandler.ServeHTTP
         0     0% 84.25%     5.50MB  0.83%  reflect.Value.SetMapIndex
         0     0% 84.25%        4MB   0.6%  strings.(*Builder).Grow (inline)
         0     0% 84.25%    92.02MB 13.87%  sync.(*Pool).Get
